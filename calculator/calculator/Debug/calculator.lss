
calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000750  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000750  000007e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080006a  0080006a  000007ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000820  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000107c  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008be  00000000  00000000  000019c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000965  00000000  00000000  0000227e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000018c  00000000  00000000  00002be4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a6  00000000  00000000  00002d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000701  00000000  00000000  00003216  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003917  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 82 00 	jmp	0x104	; 0x104 <__ctors_end>
   4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
   8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
   c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  10:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  14:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  18:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  1c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  20:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  24:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  28:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  2c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  30:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  34:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  38:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  3c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  40:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  44:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  48:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  4c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  50:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  54:	c2 00       	.word	0x00c2	; ????
  56:	d1 00       	.word	0x00d1	; ????
  58:	e2 00       	.word	0x00e2	; ????
  5a:	f3 00       	.word	0x00f3	; ????
  5c:	04 01       	movw	r0, r8
  5e:	15 01       	movw	r2, r10
  60:	26 01       	movw	r4, r12
  62:	37 01       	movw	r6, r14
  64:	48 01       	movw	r8, r16
  66:	59 01       	movw	r10, r18
  68:	b6 01       	movw	r22, r12
  6a:	b6 01       	movw	r22, r12
  6c:	b6 01       	movw	r22, r12
  6e:	b6 01       	movw	r22, r12
  70:	b6 01       	movw	r22, r12
  72:	b6 01       	movw	r22, r12
  74:	b6 01       	movw	r22, r12
  76:	b6 01       	movw	r22, r12
  78:	b6 01       	movw	r22, r12
  7a:	b6 01       	movw	r22, r12
  7c:	ef 01       	movw	r28, r30
  7e:	ef 01       	movw	r28, r30
  80:	ef 01       	movw	r28, r30
  82:	ed 01       	movw	r28, r26
  84:	ef 01       	movw	r28, r30
  86:	ef 01       	movw	r28, r30
  88:	ef 01       	movw	r28, r30
  8a:	ef 01       	movw	r28, r30
  8c:	ef 01       	movw	r28, r30
  8e:	ef 01       	movw	r28, r30
  90:	ef 01       	movw	r28, r30
  92:	ef 01       	movw	r28, r30
  94:	ef 01       	movw	r28, r30
  96:	ef 01       	movw	r28, r30
  98:	ef 01       	movw	r28, r30
  9a:	ef 01       	movw	r28, r30
  9c:	ef 01       	movw	r28, r30
  9e:	ef 01       	movw	r28, r30
  a0:	ef 01       	movw	r28, r30
  a2:	ef 01       	movw	r28, r30
  a4:	ef 01       	movw	r28, r30
  a6:	ef 01       	movw	r28, r30
  a8:	ef 01       	movw	r28, r30
  aa:	ef 01       	movw	r28, r30
  ac:	ef 01       	movw	r28, r30
  ae:	ef 01       	movw	r28, r30
  b0:	ef 01       	movw	r28, r30
  b2:	ef 01       	movw	r28, r30
  b4:	ef 01       	movw	r28, r30
  b6:	ef 01       	movw	r28, r30
  b8:	ef 01       	movw	r28, r30
  ba:	ef 01       	movw	r28, r30
  bc:	c8 01       	movw	r24, r16
  be:	c8 01       	movw	r24, r16
  c0:	ef 01       	movw	r28, r30
  c2:	c8 01       	movw	r24, r16
  c4:	ef 01       	movw	r28, r30
  c6:	c8 01       	movw	r24, r16
  c8:	ef 01       	movw	r28, r30
  ca:	ef 01       	movw	r28, r30
  cc:	ef 01       	movw	r28, r30
  ce:	ef 01       	movw	r28, r30
  d0:	ef 01       	movw	r28, r30
  d2:	ef 01       	movw	r28, r30
  d4:	ef 01       	movw	r28, r30
  d6:	ef 01       	movw	r28, r30
  d8:	ef 01       	movw	r28, r30
  da:	ef 01       	movw	r28, r30
  dc:	ef 01       	movw	r28, r30
  de:	ef 01       	movw	r28, r30
  e0:	ef 01       	movw	r28, r30
  e2:	dd 01       	movw	r26, r26
  e4:	fb 01       	movw	r30, r22
  e6:	19 02       	muls	r17, r25
  e8:	fd 01       	movw	r30, r26
  ea:	ff 01       	movw	r30, r30
  ec:	01 02       	muls	r16, r17
  ee:	03 02       	muls	r16, r19
  f0:	05 02       	muls	r16, r21
  f2:	07 02       	muls	r16, r23
  f4:	09 02       	muls	r16, r25
  f6:	0b 02       	muls	r16, r27
  f8:	0d 02       	muls	r16, r29
  fa:	0f 02       	muls	r16, r31
  fc:	11 02       	muls	r17, r17
  fe:	13 02       	muls	r17, r19
 100:	15 02       	muls	r17, r21
 102:	17 02       	muls	r17, r23

00000104 <__ctors_end>:
 104:	11 24       	eor	r1, r1
 106:	1f be       	out	0x3f, r1	; 63
 108:	cf e5       	ldi	r28, 0x5F	; 95
 10a:	d8 e0       	ldi	r29, 0x08	; 8
 10c:	de bf       	out	0x3e, r29	; 62
 10e:	cd bf       	out	0x3d, r28	; 61

00000110 <__do_copy_data>:
 110:	10 e0       	ldi	r17, 0x00	; 0
 112:	a0 e6       	ldi	r26, 0x60	; 96
 114:	b0 e0       	ldi	r27, 0x00	; 0
 116:	e0 e5       	ldi	r30, 0x50	; 80
 118:	f7 e0       	ldi	r31, 0x07	; 7
 11a:	02 c0       	rjmp	.+4      	; 0x120 <__do_copy_data+0x10>
 11c:	05 90       	lpm	r0, Z+
 11e:	0d 92       	st	X+, r0
 120:	aa 36       	cpi	r26, 0x6A	; 106
 122:	b1 07       	cpc	r27, r17
 124:	d9 f7       	brne	.-10     	; 0x11c <__do_copy_data+0xc>

00000126 <__do_clear_bss>:
 126:	20 e0       	ldi	r18, 0x00	; 0
 128:	aa e6       	ldi	r26, 0x6A	; 106
 12a:	b0 e0       	ldi	r27, 0x00	; 0
 12c:	01 c0       	rjmp	.+2      	; 0x130 <.do_clear_bss_start>

0000012e <.do_clear_bss_loop>:
 12e:	1d 92       	st	X+, r1

00000130 <.do_clear_bss_start>:
 130:	a0 37       	cpi	r26, 0x70	; 112
 132:	b2 07       	cpc	r27, r18
 134:	e1 f7       	brne	.-8      	; 0x12e <.do_clear_bss_loop>
 136:	0e 94 4f 03 	call	0x69e	; 0x69e <main>
 13a:	0c 94 a6 03 	jmp	0x74c	; 0x74c <_exit>

0000013e <__bad_interrupt>:
 13e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000142 <Calc_init>:
char op1,op2;

char operator;
void Calc_init()
{
	LCD_init();
 142:	0e 94 99 02 	call	0x532	; 0x532 <LCD_init>
	LCD_displayStringRowColumn(0,4," Welcome ");
 146:	40 e6       	ldi	r20, 0x60	; 96
 148:	50 e0       	ldi	r21, 0x00	; 0
 14a:	64 e0       	ldi	r22, 0x04	; 4
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	0e 94 22 03 	call	0x644	; 0x644 <LCD_displayStringRowColumn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	2f ef       	ldi	r18, 0xFF	; 255
 154:	80 e7       	ldi	r24, 0x70	; 112
 156:	92 e0       	ldi	r25, 0x02	; 2
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	80 40       	sbci	r24, 0x00	; 0
 15c:	90 40       	sbci	r25, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <Calc_init+0x16>
 160:	00 c0       	rjmp	.+0      	; 0x162 <Calc_init+0x20>
 162:	00 00       	nop
	_delay_ms(100);
	LCD_clearScreen();	
 164:	0e 94 4b 03 	call	0x696	; 0x696 <LCD_clearScreen>
 168:	08 95       	ret

0000016a <detect_number>:
}
void detect_number()
{  
	switch(key)
 16a:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <key>
 16e:	8e 2f       	mov	r24, r30
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	8a 30       	cpi	r24, 0x0A	; 10
 174:	91 05       	cpc	r25, r1
 176:	08 f0       	brcs	.+2      	; 0x17a <detect_number+0x10>
 178:	ac c0       	rjmp	.+344    	; 0x2d2 <detect_number+0x168>
 17a:	fc 01       	movw	r30, r24
 17c:	e6 5d       	subi	r30, 0xD6	; 214
 17e:	ff 4f       	sbci	r31, 0xFF	; 255
 180:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__tablejump2__>
	{
		case 0 :
		if (number == 0)
 184:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <number>
 188:	81 11       	cpse	r24, r1
 18a:	03 c0       	rjmp	.+6      	; 0x192 <detect_number+0x28>
		number = 0;
 18c:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <number>
 190:	a0 c0       	rjmp	.+320    	; 0x2d2 <detect_number+0x168>
		else
		number = (number*10)+0;
 192:	88 0f       	add	r24, r24
 194:	98 2f       	mov	r25, r24
 196:	99 0f       	add	r25, r25
 198:	99 0f       	add	r25, r25
 19a:	89 0f       	add	r24, r25
 19c:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <number>
 1a0:	98 c0       	rjmp	.+304    	; 0x2d2 <detect_number+0x168>
		break;
		case 1 :
		if (number == 0)
 1a2:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <number>
 1a6:	81 11       	cpse	r24, r1
 1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <detect_number+0x48>
		number = 1;
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <number>
 1b0:	90 c0       	rjmp	.+288    	; 0x2d2 <detect_number+0x168>
		else
		number = (number*10)+1;
 1b2:	88 0f       	add	r24, r24
 1b4:	98 2f       	mov	r25, r24
 1b6:	99 0f       	add	r25, r25
 1b8:	99 0f       	add	r25, r25
 1ba:	89 0f       	add	r24, r25
 1bc:	8f 5f       	subi	r24, 0xFF	; 255
 1be:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <number>
 1c2:	87 c0       	rjmp	.+270    	; 0x2d2 <detect_number+0x168>
		break;
		case 2 :
		if (number == 0)
 1c4:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <number>
 1c8:	81 11       	cpse	r24, r1
 1ca:	04 c0       	rjmp	.+8      	; 0x1d4 <detect_number+0x6a>
		number = 2;
 1cc:	82 e0       	ldi	r24, 0x02	; 2
 1ce:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <number>
 1d2:	7f c0       	rjmp	.+254    	; 0x2d2 <detect_number+0x168>
		else
		number = (number*10)+2;
 1d4:	88 0f       	add	r24, r24
 1d6:	98 2f       	mov	r25, r24
 1d8:	99 0f       	add	r25, r25
 1da:	99 0f       	add	r25, r25
 1dc:	89 0f       	add	r24, r25
 1de:	8e 5f       	subi	r24, 0xFE	; 254
 1e0:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <number>
 1e4:	76 c0       	rjmp	.+236    	; 0x2d2 <detect_number+0x168>
		break;
		case 3 :
		if (number == 0)
 1e6:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <number>
 1ea:	81 11       	cpse	r24, r1
 1ec:	04 c0       	rjmp	.+8      	; 0x1f6 <detect_number+0x8c>
		number = 3;
 1ee:	83 e0       	ldi	r24, 0x03	; 3
 1f0:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <number>
 1f4:	6e c0       	rjmp	.+220    	; 0x2d2 <detect_number+0x168>
		else
		number = (number*10)+3;
 1f6:	88 0f       	add	r24, r24
 1f8:	98 2f       	mov	r25, r24
 1fa:	99 0f       	add	r25, r25
 1fc:	99 0f       	add	r25, r25
 1fe:	89 0f       	add	r24, r25
 200:	8d 5f       	subi	r24, 0xFD	; 253
 202:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <number>
 206:	65 c0       	rjmp	.+202    	; 0x2d2 <detect_number+0x168>
		break;
		case 4 :
		if (number == 0)
 208:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <number>
 20c:	81 11       	cpse	r24, r1
 20e:	04 c0       	rjmp	.+8      	; 0x218 <detect_number+0xae>
		number = 4;
 210:	84 e0       	ldi	r24, 0x04	; 4
 212:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <number>
 216:	5d c0       	rjmp	.+186    	; 0x2d2 <detect_number+0x168>
		else
		number = (number*10)+4;
 218:	88 0f       	add	r24, r24
 21a:	98 2f       	mov	r25, r24
 21c:	99 0f       	add	r25, r25
 21e:	99 0f       	add	r25, r25
 220:	89 0f       	add	r24, r25
 222:	8c 5f       	subi	r24, 0xFC	; 252
 224:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <number>
 228:	54 c0       	rjmp	.+168    	; 0x2d2 <detect_number+0x168>
		break;
		case 5 :
		if (number == 0)
 22a:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <number>
 22e:	81 11       	cpse	r24, r1
 230:	04 c0       	rjmp	.+8      	; 0x23a <detect_number+0xd0>
		number = 5;
 232:	85 e0       	ldi	r24, 0x05	; 5
 234:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <number>
 238:	4c c0       	rjmp	.+152    	; 0x2d2 <detect_number+0x168>
		else
		number = (number*10)+5;
 23a:	88 0f       	add	r24, r24
 23c:	98 2f       	mov	r25, r24
 23e:	99 0f       	add	r25, r25
 240:	99 0f       	add	r25, r25
 242:	89 0f       	add	r24, r25
 244:	8b 5f       	subi	r24, 0xFB	; 251
 246:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <number>
 24a:	43 c0       	rjmp	.+134    	; 0x2d2 <detect_number+0x168>
		break;
		case 6 :
		if (number == 0)
 24c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <number>
 250:	81 11       	cpse	r24, r1
 252:	04 c0       	rjmp	.+8      	; 0x25c <detect_number+0xf2>
		number = 6;
 254:	86 e0       	ldi	r24, 0x06	; 6
 256:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <number>
 25a:	3b c0       	rjmp	.+118    	; 0x2d2 <detect_number+0x168>
		else
		number = (number*10)+6;
 25c:	88 0f       	add	r24, r24
 25e:	98 2f       	mov	r25, r24
 260:	99 0f       	add	r25, r25
 262:	99 0f       	add	r25, r25
 264:	89 0f       	add	r24, r25
 266:	8a 5f       	subi	r24, 0xFA	; 250
 268:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <number>
 26c:	32 c0       	rjmp	.+100    	; 0x2d2 <detect_number+0x168>
		break;
		case 7 :
		if (number == 0)
 26e:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <number>
 272:	81 11       	cpse	r24, r1
 274:	04 c0       	rjmp	.+8      	; 0x27e <detect_number+0x114>
		number = 7;
 276:	87 e0       	ldi	r24, 0x07	; 7
 278:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <number>
 27c:	2a c0       	rjmp	.+84     	; 0x2d2 <detect_number+0x168>
		else
		number = (number*10)+7;
 27e:	88 0f       	add	r24, r24
 280:	98 2f       	mov	r25, r24
 282:	99 0f       	add	r25, r25
 284:	99 0f       	add	r25, r25
 286:	89 0f       	add	r24, r25
 288:	89 5f       	subi	r24, 0xF9	; 249
 28a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <number>
 28e:	21 c0       	rjmp	.+66     	; 0x2d2 <detect_number+0x168>
		break;
		case 8 :
		if (number == 0)
 290:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <number>
 294:	81 11       	cpse	r24, r1
 296:	04 c0       	rjmp	.+8      	; 0x2a0 <detect_number+0x136>
		number = 8;
 298:	88 e0       	ldi	r24, 0x08	; 8
 29a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <number>
 29e:	19 c0       	rjmp	.+50     	; 0x2d2 <detect_number+0x168>
		else
		number = (number*10)+8;
 2a0:	88 0f       	add	r24, r24
 2a2:	98 2f       	mov	r25, r24
 2a4:	99 0f       	add	r25, r25
 2a6:	99 0f       	add	r25, r25
 2a8:	89 0f       	add	r24, r25
 2aa:	88 5f       	subi	r24, 0xF8	; 248
 2ac:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <number>
 2b0:	10 c0       	rjmp	.+32     	; 0x2d2 <detect_number+0x168>
		break;
		case 9 :
		if (number == 0)
 2b2:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <number>
 2b6:	81 11       	cpse	r24, r1
 2b8:	04 c0       	rjmp	.+8      	; 0x2c2 <detect_number+0x158>
		number = 9;
 2ba:	89 e0       	ldi	r24, 0x09	; 9
 2bc:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <number>
 2c0:	08 c0       	rjmp	.+16     	; 0x2d2 <detect_number+0x168>
		else
		number = (number*10)+9;
 2c2:	88 0f       	add	r24, r24
 2c4:	98 2f       	mov	r25, r24
 2c6:	99 0f       	add	r25, r25
 2c8:	99 0f       	add	r25, r25
 2ca:	89 0f       	add	r24, r25
 2cc:	87 5f       	subi	r24, 0xF7	; 247
 2ce:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <number>
		break;			
	}
      if (operator == 0) op1 = number;
 2d2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <operator>
 2d6:	81 11       	cpse	r24, r1
 2d8:	04 c0       	rjmp	.+8      	; 0x2e2 <detect_number+0x178>
 2da:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <number>
 2de:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <op1>
	  if (operator != 0) op2 = number;		
 2e2:	88 23       	and	r24, r24
 2e4:	21 f0       	breq	.+8      	; 0x2ee <detect_number+0x184>
 2e6:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <number>
 2ea:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
 2ee:	08 95       	ret

000002f0 <calculate>:
   }

}
void calculate(void)
{		
			if (operator == '/')
 2f0:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <operator>
 2f4:	8f 32       	cpi	r24, 0x2F	; 47
 2f6:	49 f4       	brne	.+18     	; 0x30a <calculate+0x1a>
			      result = op1 / op2 ; 
 2f8:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <op1>
 2fc:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <__data_end>
 300:	0e 94 54 03 	call	0x6a8	; 0x6a8 <__udivmodqi4>
 304:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <result>
 308:	1f c0       	rjmp	.+62     	; 0x348 <calculate+0x58>
			else if (operator == '*')
 30a:	8a 32       	cpi	r24, 0x2A	; 42
 30c:	51 f4       	brne	.+20     	; 0x322 <calculate+0x32>
			      result = op1 * op2 ;
 30e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <op1>
 312:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <__data_end>
 316:	89 9f       	mul	r24, r25
 318:	80 2d       	mov	r24, r0
 31a:	11 24       	eor	r1, r1
 31c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <result>
 320:	13 c0       	rjmp	.+38     	; 0x348 <calculate+0x58>
			else if (operator == '-')
 322:	8d 32       	cpi	r24, 0x2D	; 45
 324:	41 f4       	brne	.+16     	; 0x336 <calculate+0x46>
			      result = op1 - op2 ;
 326:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <op1>
 32a:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <__data_end>
 32e:	89 1b       	sub	r24, r25
 330:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <result>
 334:	09 c0       	rjmp	.+18     	; 0x348 <calculate+0x58>
			else if (operator == '+')
 336:	8b 32       	cpi	r24, 0x2B	; 43
 338:	39 f4       	brne	.+14     	; 0x348 <calculate+0x58>
			      result = op1 + op2 ;	
 33a:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <op1>
 33e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 342:	89 0f       	add	r24, r25
 344:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <result>
		op1 =result;		  		
 348:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <result>
 34c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <op1>
 350:	08 95       	ret

00000352 <Arth_op>:
      if (operator == 0) op1 = number;
	  if (operator != 0) op2 = number;		
}
void Arth_op(void)
{   
    key =  keypad_getPressedkey();
 352:	0e 94 1b 02 	call	0x436	; 0x436 <keypad_getPressedkey>
 356:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <key>
   switch (key)
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	8e 33       	cpi	r24, 0x3E	; 62
 35e:	91 05       	cpc	r25, r1
 360:	f0 f5       	brcc	.+124    	; 0x3de <Arth_op+0x8c>
 362:	fc 01       	movw	r30, r24
 364:	ec 5c       	subi	r30, 0xCC	; 204
 366:	ff 4f       	sbci	r31, 0xFF	; 255
 368:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__tablejump2__>
   {
	   case 0: case 1: case 2: case 3: case 4:
	   case 5: case 6: case 7: case 8: case 9:
	   if ((number == 0) && (operator == 0)) LCD_clearScreen();
 36c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <number>
 370:	81 11       	cpse	r24, r1
 372:	06 c0       	rjmp	.+12     	; 0x380 <Arth_op+0x2e>
 374:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <operator>
 378:	81 11       	cpse	r24, r1
 37a:	02 c0       	rjmp	.+4      	; 0x380 <Arth_op+0x2e>
 37c:	0e 94 4b 03 	call	0x696	; 0x696 <LCD_clearScreen>
	   detect_number();
 380:	0e 94 b5 00 	call	0x16a	; 0x16a <detect_number>
	   LCD_intgerToString(key);	   	   	  	   
 384:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <key>
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 2d 03 	call	0x65a	; 0x65a <LCD_intgerToString>
	   break;
 38e:	08 95       	ret
	   
	   case '/': case '*': case '+': case '-':
	   if ((number == 0) && (operator == 0)) LCD_clearScreen();
 390:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <number>
 394:	81 11       	cpse	r24, r1
 396:	06 c0       	rjmp	.+12     	; 0x3a4 <Arth_op+0x52>
 398:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <operator>
 39c:	81 11       	cpse	r24, r1
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <Arth_op+0x52>
 3a0:	0e 94 4b 03 	call	0x696	; 0x696 <LCD_clearScreen>
	   LCD_displayCharacter(key);	   
 3a4:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <key>
 3a8:	0e 94 ac 02 	call	0x558	; 0x558 <LCD_displayCharacter>
	   number  = 0 ;
 3ac:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <number>
       operator= key;
 3b0:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <key>
 3b4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <operator>
	   break;
 3b8:	08 95       	ret
	   
	   case '=' :
	   calculate();
 3ba:	0e 94 78 01 	call	0x2f0	; 0x2f0 <calculate>
	   LCD_goToRowColumn(1,0);
 3be:	60 e0       	ldi	r22, 0x00	; 0
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_goToRowColumn>
	   LCD_intgerToString(result);
 3c6:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <result>
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 2d 03 	call	0x65a	; 0x65a <LCD_intgerToString>
	   number   = 0 ;
 3d0:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <number>
	   operator = 0 ;
 3d4:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <operator>
	   break;
 3d8:	08 95       	ret
	   
       case 13 :
       LCD_clearScreen();
 3da:	0e 94 4b 03 	call	0x696	; 0x696 <LCD_clearScreen>
 3de:	08 95       	ret

000003e0 <keypad_4x4_adjustkeyNumber>:
}

#elif (N_COL==4)
static u8 keypad_4x4_adjustkeyNumber(u8 button_number)
{
	switch(button_number)
 3e0:	48 2f       	mov	r20, r24
 3e2:	50 e0       	ldi	r21, 0x00	; 0
 3e4:	fa 01       	movw	r30, r20
 3e6:	31 97       	sbiw	r30, 0x01	; 1
 3e8:	e0 31       	cpi	r30, 0x10	; 16
 3ea:	f1 05       	cpc	r31, r1
 3ec:	18 f5       	brcc	.+70     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 3ee:	ee 58       	subi	r30, 0x8E	; 142
 3f0:	ff 4f       	sbci	r31, 0xFF	; 255
 3f2:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__tablejump2__>
	{
	case 1: return 7;
 3f6:	87 e0       	ldi	r24, 0x07	; 7
 3f8:	08 95       	ret
	        break;
	case 2: return 8;
		    break;
	case 3: return 9;
 3fa:	89 e0       	ldi	r24, 0x09	; 9
 3fc:	08 95       	ret
		    break;
	case 4: return '/'; //ASCII Code of %
 3fe:	8f e2       	ldi	r24, 0x2F	; 47
 400:	08 95       	ret
		    break;
	case 5: return 4;
 402:	84 e0       	ldi	r24, 0x04	; 4
 404:	08 95       	ret
		    break;
	case 6: return 5;
 406:	85 e0       	ldi	r24, 0x05	; 5
 408:	08 95       	ret
		    break;
	case 7: return 6;
 40a:	86 e0       	ldi	r24, 0x06	; 6
 40c:	08 95       	ret
		    break;
	case 8: return '*'; //ASCII Code of *
 40e:	8a e2       	ldi	r24, 0x2A	; 42
 410:	08 95       	ret
		    break;
	case 9: return 1;
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	08 95       	ret
		    break;
	case 10: return 2;
 416:	82 e0       	ldi	r24, 0x02	; 2
 418:	08 95       	ret
		     break;
	case 11: return 3;
 41a:	83 e0       	ldi	r24, 0x03	; 3
 41c:	08 95       	ret
		     break;
	case 12: return'-';   //ASCII Code of -
 41e:	8d e2       	ldi	r24, 0x2D	; 45
 420:	08 95       	ret
			 break;
	case 13: return 13;   //ASCII Code of Enter
 422:	8d e0       	ldi	r24, 0x0D	; 13
 424:	08 95       	ret
		     break;
	case 14: return 0;
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	08 95       	ret
			 break;
	case 15: return '=';
 42a:	8d e3       	ldi	r24, 0x3D	; 61
 42c:	08 95       	ret
			 break;
	case 16: return '+' ;  //ASCII Code of +
 42e:	8b e2       	ldi	r24, 0x2B	; 43
 430:	08 95       	ret
{
	switch(button_number)
	{
	case 1: return 7;
	        break;
	case 2: return 8;
 432:	88 e0       	ldi	r24, 0x08	; 8
	case 16: return '+' ;  //ASCII Code of +
			 break;
	default:  return button_number;

	}
}
 434:	08 95       	ret

00000436 <keypad_getPressedkey>:
u8 keypad_getPressedkey(void)
{
	u8 col,row;
	while(1)
	{
		for(col=0;col<N_COL;col++)  //loop for columns
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	2d c0       	rjmp	.+90     	; 0x494 <keypad_getPressedkey+0x5e>

		{

			KEYPAD_PORT_DIR = (0b00010000<<col);
 43a:	20 e1       	ldi	r18, 0x10	; 16
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	08 2e       	mov	r0, r24
 440:	02 c0       	rjmp	.+4      	; 0x446 <keypad_getPressedkey+0x10>
 442:	22 0f       	add	r18, r18
 444:	33 1f       	adc	r19, r19
 446:	0a 94       	dec	r0
 448:	e2 f7       	brpl	.-8      	; 0x442 <keypad_getPressedkey+0xc>
 44a:	21 bb       	out	0x11, r18	; 17
			/*
			 * 1>>output  , 0>>input
	        * 0b 0001 0000 (0b columns rows)
	        * the loop move at columns by shifting the  1  0001>>0010>>0100>>1000
		    */
            KEYPAD_PORT_OUT = (~(0b00010000<<col)); //11101111  pull up
 44c:	20 95       	com	r18
 44e:	22 bb       	out	0x12, r18	; 18

            for(row=0;row<N_ROW;row++)
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	1d c0       	rjmp	.+58     	; 0x48e <keypad_getPressedkey+0x58>
            {
            	if(!(GET_BIT(KEYPAD_PORT_IN,row))) /* if switch is pressed in this row*/
 454:	20 b3       	in	r18, 0x10	; 16
 456:	49 2f       	mov	r20, r25
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	09 2e       	mov	r0, r25
 45c:	02 c0       	rjmp	.+4      	; 0x462 <keypad_getPressedkey+0x2c>
 45e:	35 95       	asr	r19
 460:	27 95       	ror	r18
 462:	0a 94       	dec	r0
 464:	e2 f7       	brpl	.-8      	; 0x45e <keypad_getPressedkey+0x28>
 466:	20 fd       	sbrc	r18, 0
 468:	11 c0       	rjmp	.+34     	; 0x48c <keypad_getPressedkey+0x56>
            	{  while (!(GET_BIT(KEYPAD_PORT_IN,row)));
 46a:	20 b3       	in	r18, 0x10	; 16
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	04 2e       	mov	r0, r20
 470:	02 c0       	rjmp	.+4      	; 0x476 <keypad_getPressedkey+0x40>
 472:	35 95       	asr	r19
 474:	27 95       	ror	r18
 476:	0a 94       	dec	r0
 478:	e2 f7       	brpl	.-8      	; 0x472 <keypad_getPressedkey+0x3c>
 47a:	20 ff       	sbrs	r18, 0
 47c:	f6 cf       	rjmp	.-20     	; 0x46a <keypad_getPressedkey+0x34>
                  #if(N_COL==3)
            		  return keypad_4x3_adjustkeyNumber((row*N_COL)+col+1);
                  #elif(N_COL==4)
            		  return keypad_4x4_adjustkeyNumber((row*N_COL)+col+1);
 47e:	99 0f       	add	r25, r25
 480:	99 0f       	add	r25, r25
 482:	89 0f       	add	r24, r25
 484:	8f 5f       	subi	r24, 0xFF	; 255
 486:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <keypad_4x4_adjustkeyNumber>
 48a:	08 95       	ret
	        * 0b 0001 0000 (0b columns rows)
	        * the loop move at columns by shifting the  1  0001>>0010>>0100>>1000
		    */
            KEYPAD_PORT_OUT = (~(0b00010000<<col)); //11101111  pull up

            for(row=0;row<N_ROW;row++)
 48c:	9f 5f       	subi	r25, 0xFF	; 255
 48e:	94 30       	cpi	r25, 0x04	; 4
 490:	08 f3       	brcs	.-62     	; 0x454 <keypad_getPressedkey+0x1e>
u8 keypad_getPressedkey(void)
{
	u8 col,row;
	while(1)
	{
		for(col=0;col<N_COL;col++)  //loop for columns
 492:	8f 5f       	subi	r24, 0xFF	; 255
 494:	84 30       	cpi	r24, 0x04	; 4
 496:	88 f2       	brcs	.-94     	; 0x43a <keypad_getPressedkey+0x4>
 498:	ce cf       	rjmp	.-100    	; 0x436 <keypad_getPressedkey>

0000049a <LCD_sendCommand>:

}

void LCD_sendCommand(u8 command)
{
    CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
 49a:	95 b3       	in	r25, 0x15	; 21
 49c:	9d 7f       	andi	r25, 0xFD	; 253
 49e:	95 bb       	out	0x15, r25	; 21
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* Write data to LCD RW =0 */
 4a0:	95 b3       	in	r25, 0x15	; 21
 4a2:	9b 7f       	andi	r25, 0xFB	; 251
 4a4:	95 bb       	out	0x15, r25	; 21
 4a6:	ef ec       	ldi	r30, 0xCF	; 207
 4a8:	f7 e0       	ldi	r31, 0x07	; 7
 4aa:	31 97       	sbiw	r30, 0x01	; 1
 4ac:	f1 f7       	brne	.-4      	; 0x4aa <LCD_sendCommand+0x10>
 4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <LCD_sendCommand+0x16>
 4b0:	00 00       	nop
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT,E);  /* Enable LCD E=1 */
 4b2:	95 b3       	in	r25, 0x15	; 21
 4b4:	98 60       	ori	r25, 0x08	; 8
 4b6:	95 bb       	out	0x15, r25	; 21
 4b8:	ef ec       	ldi	r30, 0xCF	; 207
 4ba:	f7 e0       	ldi	r31, 0x07	; 7
 4bc:	31 97       	sbiw	r30, 0x01	; 1
 4be:	f1 f7       	brne	.-4      	; 0x4bc <LCD_sendCommand+0x22>
 4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <LCD_sendCommand+0x28>
 4c2:	00 00       	nop
	_delay_ms(1);
#if (DATA_BITS_MODE ==4)

#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F)|(command & 0xF0);
 4c4:	95 b3       	in	r25, 0x15	; 21
 4c6:	9f 70       	andi	r25, 0x0F	; 15
 4c8:	28 2f       	mov	r18, r24
 4ca:	20 7f       	andi	r18, 0xF0	; 240
 4cc:	92 2b       	or	r25, r18
 4ce:	95 bb       	out	0x15, r25	; 21
 4d0:	ef ec       	ldi	r30, 0xCF	; 207
 4d2:	f7 e0       	ldi	r31, 0x07	; 7
 4d4:	31 97       	sbiw	r30, 0x01	; 1
 4d6:	f1 f7       	brne	.-4      	; 0x4d4 <LCD_sendCommand+0x3a>
 4d8:	00 c0       	rjmp	.+0      	; 0x4da <LCD_sendCommand+0x40>
 4da:	00 00       	nop
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0)|((command & 0xF0) >> 4);
#endif
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT,E); /* Disable LCD E=0 */
 4dc:	95 b3       	in	r25, 0x15	; 21
 4de:	97 7f       	andi	r25, 0xF7	; 247
 4e0:	95 bb       	out	0x15, r25	; 21
 4e2:	ef ec       	ldi	r30, 0xCF	; 207
 4e4:	f7 e0       	ldi	r31, 0x07	; 7
 4e6:	31 97       	sbiw	r30, 0x01	; 1
 4e8:	f1 f7       	brne	.-4      	; 0x4e6 <LCD_sendCommand+0x4c>
 4ea:	00 c0       	rjmp	.+0      	; 0x4ec <LCD_sendCommand+0x52>
 4ec:	00 00       	nop
	_delay_ms(1);
	 SET_BIT(LCD_CTRL_PORT,E);  /* Enable LCD E=1 */
 4ee:	95 b3       	in	r25, 0x15	; 21
 4f0:	98 60       	ori	r25, 0x08	; 8
 4f2:	95 bb       	out	0x15, r25	; 21
 4f4:	ef ec       	ldi	r30, 0xCF	; 207
 4f6:	f7 e0       	ldi	r31, 0x07	; 7
 4f8:	31 97       	sbiw	r30, 0x01	; 1
 4fa:	f1 f7       	brne	.-4      	; 0x4f8 <LCD_sendCommand+0x5e>
 4fc:	00 c0       	rjmp	.+0      	; 0x4fe <LCD_sendCommand+0x64>
 4fe:	00 00       	nop
	_delay_ms(1);
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F)|((command & 0x0F) <<4);
 500:	25 b3       	in	r18, 0x15	; 21
 502:	f0 e1       	ldi	r31, 0x10	; 16
 504:	8f 9f       	mul	r24, r31
 506:	c0 01       	movw	r24, r0
 508:	11 24       	eor	r1, r1
 50a:	92 2f       	mov	r25, r18
 50c:	9f 70       	andi	r25, 0x0F	; 15
 50e:	89 2b       	or	r24, r25
 510:	85 bb       	out	0x15, r24	; 21
 512:	8f ec       	ldi	r24, 0xCF	; 207
 514:	97 e0       	ldi	r25, 0x07	; 7
 516:	01 97       	sbiw	r24, 0x01	; 1
 518:	f1 f7       	brne	.-4      	; 0x516 <LCD_sendCommand+0x7c>
 51a:	00 c0       	rjmp	.+0      	; 0x51c <LCD_sendCommand+0x82>
 51c:	00 00       	nop
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0)|(command & 0x0F);
#endif
	   _delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT,E); /* Disable LCD E=0 */
 51e:	85 b3       	in	r24, 0x15	; 21
 520:	87 7f       	andi	r24, 0xF7	; 247
 522:	85 bb       	out	0x15, r24	; 21
 524:	ef ec       	ldi	r30, 0xCF	; 207
 526:	f7 e0       	ldi	r31, 0x07	; 7
 528:	31 97       	sbiw	r30, 0x01	; 1
 52a:	f1 f7       	brne	.-4      	; 0x528 <LCD_sendCommand+0x8e>
 52c:	00 c0       	rjmp	.+0      	; 0x52e <LCD_sendCommand+0x94>
 52e:	00 00       	nop
 530:	08 95       	ret

00000532 <LCD_init>:
 *                      Function Definitions
 ********************************************************/

void LCD_init(void)
{
	LCD_CTRL_PORT_DIR |=(1<<E) |(1<<RS)|(1<<RW); ///configure the control pins (E,RS,RW)
 532:	84 b3       	in	r24, 0x14	; 20
 534:	8e 60       	ori	r24, 0x0E	; 14
 536:	84 bb       	out	0x14, r24	; 20
    #if (DATA_BITS_MODE ==4)
        #ifdef UPPER_PORT_PINS
	      LCD_DATA_PORT_DIR |= 0xF0; /// configure the highest 4 bits of the data port as output port
 538:	84 b3       	in	r24, 0x14	; 20
 53a:	80 6f       	ori	r24, 0xF0	; 240
 53c:	84 bb       	out	0x14, r24	; 20
        #else
	     LCD_DATA_PORT_DIR |= 0x0F; /// configure the highest 4 bits of the data port as output port
        #endif
	     LCD_sendCommand(FOUR_BITS_DATA_MODE);
 53e:	82 e0       	ldi	r24, 0x02	; 2
 540:	0e 94 4d 02 	call	0x49a	; 0x49a <LCD_sendCommand>
	     LCD_sendCommand(TWO_LINE_LCD_FOUR_BITS_MODE);
 544:	88 e2       	ldi	r24, 0x28	; 40
 546:	0e 94 4d 02 	call	0x49a	; 0x49a <LCD_sendCommand>
    #elif (DATA_BITS_MODE == 8)
	 	LCD_DATA_PORT_DIR = 0xFF; /// configure the data port as output port
	    LCD_sendCommand(TWO_LINE_LCD_EIGHT_BIT_MODE); /* use 2-line lcd and 8 bit Data Mode */
    #endif

	LCD_sendCommand(CURSOR_OFF); /* cursor off */
 54a:	8c e0       	ldi	r24, 0x0C	; 12
 54c:	0e 94 4d 02 	call	0x49a	; 0x49a <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	0e 94 4d 02 	call	0x49a	; 0x49a <LCD_sendCommand>
 556:	08 95       	ret

00000558 <LCD_displayCharacter>:
#endif
}

void LCD_displayCharacter(u8 data)
{
	    SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=0 */
 558:	95 b3       	in	r25, 0x15	; 21
 55a:	92 60       	ori	r25, 0x02	; 2
 55c:	95 bb       	out	0x15, r25	; 21
		CLEAR_BIT(LCD_CTRL_PORT,RW); /* Write data to LCD RW =0 */
 55e:	95 b3       	in	r25, 0x15	; 21
 560:	9b 7f       	andi	r25, 0xFB	; 251
 562:	95 bb       	out	0x15, r25	; 21
 564:	ef ec       	ldi	r30, 0xCF	; 207
 566:	f7 e0       	ldi	r31, 0x07	; 7
 568:	31 97       	sbiw	r30, 0x01	; 1
 56a:	f1 f7       	brne	.-4      	; 0x568 <LCD_displayCharacter+0x10>
 56c:	00 c0       	rjmp	.+0      	; 0x56e <LCD_displayCharacter+0x16>
 56e:	00 00       	nop
		_delay_ms(1);
		SET_BIT(LCD_CTRL_PORT,E);  /* Enable LCD E=1 */
 570:	95 b3       	in	r25, 0x15	; 21
 572:	98 60       	ori	r25, 0x08	; 8
 574:	95 bb       	out	0x15, r25	; 21
 576:	ef ec       	ldi	r30, 0xCF	; 207
 578:	f7 e0       	ldi	r31, 0x07	; 7
 57a:	31 97       	sbiw	r30, 0x01	; 1
 57c:	f1 f7       	brne	.-4      	; 0x57a <LCD_displayCharacter+0x22>
 57e:	00 c0       	rjmp	.+0      	; 0x580 <LCD_displayCharacter+0x28>
 580:	00 00       	nop
		_delay_ms(1);
#if (DATA_BITS_MODE == 4)

#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F)|(data & 0xF0);
 582:	95 b3       	in	r25, 0x15	; 21
 584:	9f 70       	andi	r25, 0x0F	; 15
 586:	28 2f       	mov	r18, r24
 588:	20 7f       	andi	r18, 0xF0	; 240
 58a:	92 2b       	or	r25, r18
 58c:	95 bb       	out	0x15, r25	; 21
 58e:	ef ec       	ldi	r30, 0xCF	; 207
 590:	f7 e0       	ldi	r31, 0x07	; 7
 592:	31 97       	sbiw	r30, 0x01	; 1
 594:	f1 f7       	brne	.-4      	; 0x592 <LCD_displayCharacter+0x3a>
 596:	00 c0       	rjmp	.+0      	; 0x598 <LCD_displayCharacter+0x40>
 598:	00 00       	nop
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0)|((data & 0xF0) >> 4);
#endif
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT,E); /* Disable LCD E=0 */
 59a:	95 b3       	in	r25, 0x15	; 21
 59c:	97 7f       	andi	r25, 0xF7	; 247
 59e:	95 bb       	out	0x15, r25	; 21
 5a0:	ef ec       	ldi	r30, 0xCF	; 207
 5a2:	f7 e0       	ldi	r31, 0x07	; 7
 5a4:	31 97       	sbiw	r30, 0x01	; 1
 5a6:	f1 f7       	brne	.-4      	; 0x5a4 <LCD_displayCharacter+0x4c>
 5a8:	00 c0       	rjmp	.+0      	; 0x5aa <LCD_displayCharacter+0x52>
 5aa:	00 00       	nop
	_delay_ms(1);
	 SET_BIT(LCD_CTRL_PORT,E);  /* Enable LCD E=1 */
 5ac:	95 b3       	in	r25, 0x15	; 21
 5ae:	98 60       	ori	r25, 0x08	; 8
 5b0:	95 bb       	out	0x15, r25	; 21
 5b2:	ef ec       	ldi	r30, 0xCF	; 207
 5b4:	f7 e0       	ldi	r31, 0x07	; 7
 5b6:	31 97       	sbiw	r30, 0x01	; 1
 5b8:	f1 f7       	brne	.-4      	; 0x5b6 <LCD_displayCharacter+0x5e>
 5ba:	00 c0       	rjmp	.+0      	; 0x5bc <LCD_displayCharacter+0x64>
 5bc:	00 00       	nop
	_delay_ms(1);
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F)|((data & 0x0F) <<4);
 5be:	25 b3       	in	r18, 0x15	; 21
 5c0:	f0 e1       	ldi	r31, 0x10	; 16
 5c2:	8f 9f       	mul	r24, r31
 5c4:	c0 01       	movw	r24, r0
 5c6:	11 24       	eor	r1, r1
 5c8:	92 2f       	mov	r25, r18
 5ca:	9f 70       	andi	r25, 0x0F	; 15
 5cc:	89 2b       	or	r24, r25
 5ce:	85 bb       	out	0x15, r24	; 21
 5d0:	8f ec       	ldi	r24, 0xCF	; 207
 5d2:	97 e0       	ldi	r25, 0x07	; 7
 5d4:	01 97       	sbiw	r24, 0x01	; 1
 5d6:	f1 f7       	brne	.-4      	; 0x5d4 <LCD_displayCharacter+0x7c>
 5d8:	00 c0       	rjmp	.+0      	; 0x5da <LCD_displayCharacter+0x82>
 5da:	00 00       	nop
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0)|(data & 0x0F);
#endif
	   _delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT,E); /* Disable LCD E=0 */
 5dc:	85 b3       	in	r24, 0x15	; 21
 5de:	87 7f       	andi	r24, 0xF7	; 247
 5e0:	85 bb       	out	0x15, r24	; 21
 5e2:	ef ec       	ldi	r30, 0xCF	; 207
 5e4:	f7 e0       	ldi	r31, 0x07	; 7
 5e6:	31 97       	sbiw	r30, 0x01	; 1
 5e8:	f1 f7       	brne	.-4      	; 0x5e6 <LCD_displayCharacter+0x8e>
 5ea:	00 c0       	rjmp	.+0      	; 0x5ec <LCD_displayCharacter+0x94>
 5ec:	00 00       	nop
 5ee:	08 95       	ret

000005f0 <LCD_displayString>:
	_delay_ms(1);
#endif
}

void LCD_displayString(const char *str)
{
 5f0:	0f 93       	push	r16
 5f2:	1f 93       	push	r17
 5f4:	cf 93       	push	r28
 5f6:	8c 01       	movw	r16, r24
	u8 i = 0;
 5f8:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[i] != '\0')
 5fa:	03 c0       	rjmp	.+6      	; 0x602 <LCD_displayString+0x12>
	{
		LCD_displayCharacter(str[i]);
 5fc:	0e 94 ac 02 	call	0x558	; 0x558 <LCD_displayCharacter>
		i++;
 600:	cf 5f       	subi	r28, 0xFF	; 255
}

void LCD_displayString(const char *str)
{
	u8 i = 0;
	while(str[i] != '\0')
 602:	f8 01       	movw	r30, r16
 604:	ec 0f       	add	r30, r28
 606:	f1 1d       	adc	r31, r1
 608:	80 81       	ld	r24, Z
 60a:	81 11       	cpse	r24, r1
 60c:	f7 cf       	rjmp	.-18     	; 0x5fc <LCD_displayString+0xc>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
 60e:	cf 91       	pop	r28
 610:	1f 91       	pop	r17
 612:	0f 91       	pop	r16
 614:	08 95       	ret

00000616 <LCD_goToRowColumn>:

void LCD_goToRowColumn(u8 row,u8 col)
{
	u8 address;

	switch(row)
 616:	81 30       	cpi	r24, 0x01	; 1
 618:	31 f0       	breq	.+12     	; 0x626 <LCD_goToRowColumn+0x10>
 61a:	70 f0       	brcs	.+28     	; 0x638 <LCD_goToRowColumn+0x22>
 61c:	82 30       	cpi	r24, 0x02	; 2
 61e:	31 f0       	breq	.+12     	; 0x62c <LCD_goToRowColumn+0x16>
 620:	83 30       	cpi	r24, 0x03	; 3
 622:	39 f0       	breq	.+14     	; 0x632 <LCD_goToRowColumn+0x1c>
 624:	0a c0       	rjmp	.+20     	; 0x63a <LCD_goToRowColumn+0x24>
	{
	 case 0:
		    address = col;
		    break;
	 case 1:
			address = col+0x40;
 626:	90 e4       	ldi	r25, 0x40	; 64
 628:	96 0f       	add	r25, r22
			break;
 62a:	07 c0       	rjmp	.+14     	; 0x63a <LCD_goToRowColumn+0x24>
	 case 2:
			address = col+0x10;
 62c:	90 e1       	ldi	r25, 0x10	; 16
 62e:	96 0f       	add	r25, r22
			break;
 630:	04 c0       	rjmp	.+8      	; 0x63a <LCD_goToRowColumn+0x24>
	 case 3:
			address = col+0x50;
 632:	90 e5       	ldi	r25, 0x50	; 80
 634:	96 0f       	add	r25, r22
			break;
 636:	01 c0       	rjmp	.+2      	; 0x63a <LCD_goToRowColumn+0x24>
	u8 address;

	switch(row)
	{
	 case 0:
		    address = col;
 638:	96 2f       	mov	r25, r22
	 case 3:
			address = col+0x50;
			break;
	}

	LCD_sendCommand(address | SET_CURSOR_LOCATION);
 63a:	89 2f       	mov	r24, r25
 63c:	80 68       	ori	r24, 0x80	; 128
 63e:	0e 94 4d 02 	call	0x49a	; 0x49a <LCD_sendCommand>
 642:	08 95       	ret

00000644 <LCD_displayStringRowColumn>:

}

void LCD_displayStringRowColumn(u8 row,u8 col,const char *str)
{
 644:	cf 93       	push	r28
 646:	df 93       	push	r29
 648:	ea 01       	movw	r28, r20
	LCD_goToRowColumn(row,col); //go to require LCD position
 64a:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_goToRowColumn>
	LCD_displayString(str); // Display the string
 64e:	ce 01       	movw	r24, r28
 650:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <LCD_displayString>

}
 654:	df 91       	pop	r29
 656:	cf 91       	pop	r28
 658:	08 95       	ret

0000065a <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
 65a:	cf 93       	push	r28
 65c:	df 93       	push	r29
 65e:	cd b7       	in	r28, 0x3d	; 61
 660:	de b7       	in	r29, 0x3e	; 62
 662:	60 97       	sbiw	r28, 0x10	; 16
 664:	0f b6       	in	r0, 0x3f	; 63
 666:	f8 94       	cli
 668:	de bf       	out	0x3e, r29	; 62
 66a:	0f be       	out	0x3f, r0	; 63
 66c:	cd bf       	out	0x3d, r28	; 61
	char buff[16]; // string to hold ASCII result
	itoa(data,buff,10); // 10 base for decimal
 66e:	4a e0       	ldi	r20, 0x0A	; 10
 670:	50 e0       	ldi	r21, 0x00	; 0
 672:	be 01       	movw	r22, r28
 674:	6f 5f       	subi	r22, 0xFF	; 255
 676:	7f 4f       	sbci	r23, 0xFF	; 255
 678:	0e 94 66 03 	call	0x6cc	; 0x6cc <itoa>
	LCD_displayString(buff);
 67c:	ce 01       	movw	r24, r28
 67e:	01 96       	adiw	r24, 0x01	; 1
 680:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <LCD_displayString>
}
 684:	60 96       	adiw	r28, 0x10	; 16
 686:	0f b6       	in	r0, 0x3f	; 63
 688:	f8 94       	cli
 68a:	de bf       	out	0x3e, r29	; 62
 68c:	0f be       	out	0x3f, r0	; 63
 68e:	cd bf       	out	0x3d, r28	; 61
 690:	df 91       	pop	r29
 692:	cf 91       	pop	r28
 694:	08 95       	ret

00000696 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
	LCD_sendCommand(CLEAR_COMMAND); // clear display
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	0e 94 4d 02 	call	0x49a	; 0x49a <LCD_sendCommand>
 69c:	08 95       	ret

0000069e <main>:
#include "keypad.h"
#include "calculator.h"
int main(void)
{
   
	Calc_init();
 69e:	0e 94 a1 00 	call	0x142	; 0x142 <Calc_init>
	
    while (1) 
    { 
		Arth_op();
 6a2:	0e 94 a9 01 	call	0x352	; 0x352 <Arth_op>
 6a6:	fd cf       	rjmp	.-6      	; 0x6a2 <main+0x4>

000006a8 <__udivmodqi4>:
 6a8:	99 1b       	sub	r25, r25
 6aa:	79 e0       	ldi	r23, 0x09	; 9
 6ac:	04 c0       	rjmp	.+8      	; 0x6b6 <__udivmodqi4_ep>

000006ae <__udivmodqi4_loop>:
 6ae:	99 1f       	adc	r25, r25
 6b0:	96 17       	cp	r25, r22
 6b2:	08 f0       	brcs	.+2      	; 0x6b6 <__udivmodqi4_ep>
 6b4:	96 1b       	sub	r25, r22

000006b6 <__udivmodqi4_ep>:
 6b6:	88 1f       	adc	r24, r24
 6b8:	7a 95       	dec	r23
 6ba:	c9 f7       	brne	.-14     	; 0x6ae <__udivmodqi4_loop>
 6bc:	80 95       	com	r24
 6be:	08 95       	ret

000006c0 <__tablejump2__>:
 6c0:	ee 0f       	add	r30, r30
 6c2:	ff 1f       	adc	r31, r31
 6c4:	05 90       	lpm	r0, Z+
 6c6:	f4 91       	lpm	r31, Z
 6c8:	e0 2d       	mov	r30, r0
 6ca:	09 94       	ijmp

000006cc <itoa>:
 6cc:	45 32       	cpi	r20, 0x25	; 37
 6ce:	51 05       	cpc	r21, r1
 6d0:	20 f4       	brcc	.+8      	; 0x6da <itoa+0xe>
 6d2:	42 30       	cpi	r20, 0x02	; 2
 6d4:	10 f0       	brcs	.+4      	; 0x6da <itoa+0xe>
 6d6:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__itoa_ncheck>
 6da:	fb 01       	movw	r30, r22
 6dc:	10 82       	st	Z, r1
 6de:	cb 01       	movw	r24, r22
 6e0:	08 95       	ret

000006e2 <__itoa_ncheck>:
 6e2:	bb 27       	eor	r27, r27
 6e4:	4a 30       	cpi	r20, 0x0A	; 10
 6e6:	31 f4       	brne	.+12     	; 0x6f4 <__itoa_ncheck+0x12>
 6e8:	99 23       	and	r25, r25
 6ea:	22 f4       	brpl	.+8      	; 0x6f4 <__itoa_ncheck+0x12>
 6ec:	bd e2       	ldi	r27, 0x2D	; 45
 6ee:	90 95       	com	r25
 6f0:	81 95       	neg	r24
 6f2:	9f 4f       	sbci	r25, 0xFF	; 255
 6f4:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__utoa_common>

000006f8 <__utoa_ncheck>:
 6f8:	bb 27       	eor	r27, r27

000006fa <__utoa_common>:
 6fa:	fb 01       	movw	r30, r22
 6fc:	55 27       	eor	r21, r21
 6fe:	aa 27       	eor	r26, r26
 700:	88 0f       	add	r24, r24
 702:	99 1f       	adc	r25, r25
 704:	aa 1f       	adc	r26, r26
 706:	a4 17       	cp	r26, r20
 708:	10 f0       	brcs	.+4      	; 0x70e <__utoa_common+0x14>
 70a:	a4 1b       	sub	r26, r20
 70c:	83 95       	inc	r24
 70e:	50 51       	subi	r21, 0x10	; 16
 710:	b9 f7       	brne	.-18     	; 0x700 <__utoa_common+0x6>
 712:	a0 5d       	subi	r26, 0xD0	; 208
 714:	aa 33       	cpi	r26, 0x3A	; 58
 716:	08 f0       	brcs	.+2      	; 0x71a <__utoa_common+0x20>
 718:	a9 5d       	subi	r26, 0xD9	; 217
 71a:	a1 93       	st	Z+, r26
 71c:	00 97       	sbiw	r24, 0x00	; 0
 71e:	79 f7       	brne	.-34     	; 0x6fe <__utoa_common+0x4>
 720:	b1 11       	cpse	r27, r1
 722:	b1 93       	st	Z+, r27
 724:	11 92       	st	Z+, r1
 726:	cb 01       	movw	r24, r22
 728:	0c 94 96 03 	jmp	0x72c	; 0x72c <strrev>

0000072c <strrev>:
 72c:	dc 01       	movw	r26, r24
 72e:	fc 01       	movw	r30, r24
 730:	67 2f       	mov	r22, r23
 732:	71 91       	ld	r23, Z+
 734:	77 23       	and	r23, r23
 736:	e1 f7       	brne	.-8      	; 0x730 <strrev+0x4>
 738:	32 97       	sbiw	r30, 0x02	; 2
 73a:	04 c0       	rjmp	.+8      	; 0x744 <strrev+0x18>
 73c:	7c 91       	ld	r23, X
 73e:	6d 93       	st	X+, r22
 740:	70 83       	st	Z, r23
 742:	62 91       	ld	r22, -Z
 744:	ae 17       	cp	r26, r30
 746:	bf 07       	cpc	r27, r31
 748:	c8 f3       	brcs	.-14     	; 0x73c <strrev+0x10>
 74a:	08 95       	ret

0000074c <_exit>:
 74c:	f8 94       	cli

0000074e <__stop_program>:
 74e:	ff cf       	rjmp	.-2      	; 0x74e <__stop_program>
