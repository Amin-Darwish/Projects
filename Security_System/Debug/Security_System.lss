
Security_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d6e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000d6e  00000de2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001254  00000000  00000000  00000de4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000daa  00000000  00000000  00002038  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000030  00000000  00000000  00002de2  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002e14  2**2
                  CONTENTS, READONLY
  6 .debug_info   000004e6  00000000  00000000  00002e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004a3  00000000  00000000  00003336  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  000037d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  000037f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 c9 02 	call	0x592	; 0x592 <main>
  64:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_voidSetPinDir>:
#include "DIO_private.h"



void DIO_voidSetPinDir(u8 Copy_u8Port, u8 copy_u8Pin, u8 copy_u8Dir)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <DIO_voidSetPinDir+0x6>
  72:	1f 92       	push	r1
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
  78:	89 83       	std	Y+1, r24	; 0x01
  7a:	6a 83       	std	Y+2, r22	; 0x02
  7c:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8Port)
  7e:	89 81       	ldd	r24, Y+1	; 0x01
  80:	88 2f       	mov	r24, r24
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	81 30       	cpi	r24, 0x01	; 1
  86:	91 05       	cpc	r25, r1
  88:	09 f4       	brne	.+2      	; 0x8c <DIO_voidSetPinDir+0x20>
  8a:	42 c0       	rjmp	.+132    	; 0x110 <DIO_voidSetPinDir+0xa4>
  8c:	82 30       	cpi	r24, 0x02	; 2
  8e:	91 05       	cpc	r25, r1
  90:	1c f4       	brge	.+6      	; 0x98 <DIO_voidSetPinDir+0x2c>
  92:	89 2b       	or	r24, r25
  94:	49 f0       	breq	.+18     	; 0xa8 <DIO_voidSetPinDir+0x3c>
		  {
			  CLEAR_BIT(DDRD, copy_u8Pin );
         }
		  break;
	}
}
  96:	de c0       	rjmp	.+444    	; 0x254 <DIO_voidSetPinDir+0x1e8>



void DIO_voidSetPinDir(u8 Copy_u8Port, u8 copy_u8Pin, u8 copy_u8Dir)
{
	switch(Copy_u8Port)
  98:	82 30       	cpi	r24, 0x02	; 2
  9a:	91 05       	cpc	r25, r1
  9c:	09 f4       	brne	.+2      	; 0xa0 <DIO_voidSetPinDir+0x34>
  9e:	6c c0       	rjmp	.+216    	; 0x178 <DIO_voidSetPinDir+0x10c>
  a0:	03 97       	sbiw	r24, 0x03	; 3
  a2:	09 f4       	brne	.+2      	; 0xa6 <DIO_voidSetPinDir+0x3a>
  a4:	9d c0       	rjmp	.+314    	; 0x1e0 <DIO_voidSetPinDir+0x174>
		  {
			  CLEAR_BIT(DDRD, copy_u8Pin );
         }
		  break;
	}
}
  a6:	d6 c0       	rjmp	.+428    	; 0x254 <DIO_voidSetPinDir+0x1e8>
void DIO_voidSetPinDir(u8 Copy_u8Port, u8 copy_u8Pin, u8 copy_u8Dir)
{
	switch(Copy_u8Port)
	{          // PORTA
	      case DIO_U8_PORTA:
		  if (copy_u8Dir == DIO_U8_OUTPUT)
  a8:	8b 81       	ldd	r24, Y+3	; 0x03
  aa:	81 30       	cpi	r24, 0x01	; 1
  ac:	b1 f4       	brne	.+44     	; 0xda <DIO_voidSetPinDir+0x6e>
		  {
			  SET_BIT(DDRA, copy_u8Pin );
  ae:	8a e3       	ldi	r24, 0x3A	; 58
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	fc 01       	movw	r30, r24
  b4:	80 81       	ld	r24, Z
  b6:	48 2f       	mov	r20, r24
  b8:	8a 81       	ldd	r24, Y+2	; 0x02
  ba:	28 2f       	mov	r18, r24
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <DIO_voidSetPinDir+0x5c>
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	2a 95       	dec	r18
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <DIO_voidSetPinDir+0x58>
  cc:	24 2f       	mov	r18, r20
  ce:	28 2b       	or	r18, r24
  d0:	8a e3       	ldi	r24, 0x3A	; 58
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	fc 01       	movw	r30, r24
  d6:	20 83       	st	Z, r18
		  }
		  else if (copy_u8Dir == DIO_U8_INPUT)
		  {
			  CLEAR_BIT(DDRA, copy_u8Pin );
		  }
		  break;
  d8:	b6 c0       	rjmp	.+364    	; 0x246 <DIO_voidSetPinDir+0x1da>
	      case DIO_U8_PORTA:
		  if (copy_u8Dir == DIO_U8_OUTPUT)
		  {
			  SET_BIT(DDRA, copy_u8Pin );
		  }
		  else if (copy_u8Dir == DIO_U8_INPUT)
  da:	8b 81       	ldd	r24, Y+3	; 0x03
  dc:	88 23       	and	r24, r24
  de:	09 f0       	breq	.+2      	; 0xe2 <DIO_voidSetPinDir+0x76>
  e0:	b2 c0       	rjmp	.+356    	; 0x246 <DIO_voidSetPinDir+0x1da>
		  {
			  CLEAR_BIT(DDRA, copy_u8Pin );
  e2:	8a e3       	ldi	r24, 0x3A	; 58
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	fc 01       	movw	r30, r24
  e8:	80 81       	ld	r24, Z
  ea:	48 2f       	mov	r20, r24
  ec:	8a 81       	ldd	r24, Y+2	; 0x02
  ee:	28 2f       	mov	r18, r24
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_voidSetPinDir+0x90>
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	2a 95       	dec	r18
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_voidSetPinDir+0x8c>
 100:	80 95       	com	r24
 102:	24 2f       	mov	r18, r20
 104:	28 23       	and	r18, r24
 106:	8a e3       	ldi	r24, 0x3A	; 58
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	fc 01       	movw	r30, r24
 10c:	20 83       	st	Z, r18
		  }
		  break;
 10e:	9b c0       	rjmp	.+310    	; 0x246 <DIO_voidSetPinDir+0x1da>
		            // PORTB
		  case DIO_U8_PORTB:
		  if (copy_u8Dir == DIO_U8_OUTPUT)
 110:	8b 81       	ldd	r24, Y+3	; 0x03
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	b1 f4       	brne	.+44     	; 0x142 <DIO_voidSetPinDir+0xd6>
		  {
			  SET_BIT(DDRB, copy_u8Pin );
 116:	87 e3       	ldi	r24, 0x37	; 55
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	fc 01       	movw	r30, r24
 11c:	80 81       	ld	r24, Z
 11e:	48 2f       	mov	r20, r24
 120:	8a 81       	ldd	r24, Y+2	; 0x02
 122:	28 2f       	mov	r18, r24
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_voidSetPinDir+0xc4>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	2a 95       	dec	r18
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_voidSetPinDir+0xc0>
 134:	24 2f       	mov	r18, r20
 136:	28 2b       	or	r18, r24
 138:	87 e3       	ldi	r24, 0x37	; 55
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	fc 01       	movw	r30, r24
 13e:	20 83       	st	Z, r18
		  }
		  else if (copy_u8Dir == DIO_U8_INPUT)
		  {
			  CLEAR_BIT(DDRB, copy_u8Pin );
		  }
		  break;
 140:	84 c0       	rjmp	.+264    	; 0x24a <DIO_voidSetPinDir+0x1de>
		  case DIO_U8_PORTB:
		  if (copy_u8Dir == DIO_U8_OUTPUT)
		  {
			  SET_BIT(DDRB, copy_u8Pin );
		  }
		  else if (copy_u8Dir == DIO_U8_INPUT)
 142:	8b 81       	ldd	r24, Y+3	; 0x03
 144:	88 23       	and	r24, r24
 146:	09 f0       	breq	.+2      	; 0x14a <DIO_voidSetPinDir+0xde>
 148:	80 c0       	rjmp	.+256    	; 0x24a <DIO_voidSetPinDir+0x1de>
		  {
			  CLEAR_BIT(DDRB, copy_u8Pin );
 14a:	87 e3       	ldi	r24, 0x37	; 55
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	fc 01       	movw	r30, r24
 150:	80 81       	ld	r24, Z
 152:	48 2f       	mov	r20, r24
 154:	8a 81       	ldd	r24, Y+2	; 0x02
 156:	28 2f       	mov	r18, r24
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_voidSetPinDir+0xf8>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	2a 95       	dec	r18
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_voidSetPinDir+0xf4>
 168:	80 95       	com	r24
 16a:	24 2f       	mov	r18, r20
 16c:	28 23       	and	r18, r24
 16e:	87 e3       	ldi	r24, 0x37	; 55
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	fc 01       	movw	r30, r24
 174:	20 83       	st	Z, r18
		  }
		  break;
 176:	69 c0       	rjmp	.+210    	; 0x24a <DIO_voidSetPinDir+0x1de>
		           // PORTC
		  case DIO_U8_PORTC:
		  if (copy_u8Dir == DIO_U8_OUTPUT)
 178:	8b 81       	ldd	r24, Y+3	; 0x03
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	b1 f4       	brne	.+44     	; 0x1aa <DIO_voidSetPinDir+0x13e>
		  {
			  SET_BIT(DDRC, copy_u8Pin );
 17e:	84 e3       	ldi	r24, 0x34	; 52
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	fc 01       	movw	r30, r24
 184:	80 81       	ld	r24, Z
 186:	48 2f       	mov	r20, r24
 188:	8a 81       	ldd	r24, Y+2	; 0x02
 18a:	28 2f       	mov	r18, r24
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_voidSetPinDir+0x12c>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	2a 95       	dec	r18
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_voidSetPinDir+0x128>
 19c:	24 2f       	mov	r18, r20
 19e:	28 2b       	or	r18, r24
 1a0:	84 e3       	ldi	r24, 0x34	; 52
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	fc 01       	movw	r30, r24
 1a6:	20 83       	st	Z, r18
		  }
		  else if (copy_u8Dir == DIO_U8_INPUT)
		  {
			  CLEAR_BIT(DDRC, copy_u8Pin );
		  }
		  break;
 1a8:	52 c0       	rjmp	.+164    	; 0x24e <DIO_voidSetPinDir+0x1e2>
		  case DIO_U8_PORTC:
		  if (copy_u8Dir == DIO_U8_OUTPUT)
		  {
			  SET_BIT(DDRC, copy_u8Pin );
		  }
		  else if (copy_u8Dir == DIO_U8_INPUT)
 1aa:	8b 81       	ldd	r24, Y+3	; 0x03
 1ac:	88 23       	and	r24, r24
 1ae:	09 f0       	breq	.+2      	; 0x1b2 <DIO_voidSetPinDir+0x146>
 1b0:	4e c0       	rjmp	.+156    	; 0x24e <DIO_voidSetPinDir+0x1e2>
		  {
			  CLEAR_BIT(DDRC, copy_u8Pin );
 1b2:	84 e3       	ldi	r24, 0x34	; 52
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	fc 01       	movw	r30, r24
 1b8:	80 81       	ld	r24, Z
 1ba:	48 2f       	mov	r20, r24
 1bc:	8a 81       	ldd	r24, Y+2	; 0x02
 1be:	28 2f       	mov	r18, r24
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_voidSetPinDir+0x160>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	2a 95       	dec	r18
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_voidSetPinDir+0x15c>
 1d0:	80 95       	com	r24
 1d2:	24 2f       	mov	r18, r20
 1d4:	28 23       	and	r18, r24
 1d6:	84 e3       	ldi	r24, 0x34	; 52
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	fc 01       	movw	r30, r24
 1dc:	20 83       	st	Z, r18
		  }
		  break;
 1de:	37 c0       	rjmp	.+110    	; 0x24e <DIO_voidSetPinDir+0x1e2>
		           // PORTD
		  case DIO_U8_PORTD:
		  if (copy_u8Dir == DIO_U8_OUTPUT)
 1e0:	8b 81       	ldd	r24, Y+3	; 0x03
 1e2:	81 30       	cpi	r24, 0x01	; 1
 1e4:	b1 f4       	brne	.+44     	; 0x212 <DIO_voidSetPinDir+0x1a6>
		  {
			  SET_BIT(DDRD, copy_u8Pin );
 1e6:	81 e3       	ldi	r24, 0x31	; 49
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	fc 01       	movw	r30, r24
 1ec:	80 81       	ld	r24, Z
 1ee:	48 2f       	mov	r20, r24
 1f0:	8a 81       	ldd	r24, Y+2	; 0x02
 1f2:	28 2f       	mov	r18, r24
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_voidSetPinDir+0x194>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	2a 95       	dec	r18
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_voidSetPinDir+0x190>
 204:	24 2f       	mov	r18, r20
 206:	28 2b       	or	r18, r24
 208:	81 e3       	ldi	r24, 0x31	; 49
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	fc 01       	movw	r30, r24
 20e:	20 83       	st	Z, r18
		  }
		  else if(copy_u8Dir == DIO_U8_INPUT)
		  {
			  CLEAR_BIT(DDRD, copy_u8Pin );
         }
		  break;
 210:	20 c0       	rjmp	.+64     	; 0x252 <DIO_voidSetPinDir+0x1e6>
		  case DIO_U8_PORTD:
		  if (copy_u8Dir == DIO_U8_OUTPUT)
		  {
			  SET_BIT(DDRD, copy_u8Pin );
		  }
		  else if(copy_u8Dir == DIO_U8_INPUT)
 212:	8b 81       	ldd	r24, Y+3	; 0x03
 214:	88 23       	and	r24, r24
 216:	e9 f4       	brne	.+58     	; 0x252 <DIO_voidSetPinDir+0x1e6>
		  {
			  CLEAR_BIT(DDRD, copy_u8Pin );
 218:	81 e3       	ldi	r24, 0x31	; 49
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	fc 01       	movw	r30, r24
 21e:	80 81       	ld	r24, Z
 220:	48 2f       	mov	r20, r24
 222:	8a 81       	ldd	r24, Y+2	; 0x02
 224:	28 2f       	mov	r18, r24
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_voidSetPinDir+0x1c6>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	2a 95       	dec	r18
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_voidSetPinDir+0x1c2>
 236:	80 95       	com	r24
 238:	24 2f       	mov	r18, r20
 23a:	28 23       	and	r18, r24
 23c:	81 e3       	ldi	r24, 0x31	; 49
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	fc 01       	movw	r30, r24
 242:	20 83       	st	Z, r18
         }
		  break;
 244:	06 c0       	rjmp	.+12     	; 0x252 <DIO_voidSetPinDir+0x1e6>
		  }
		  else if (copy_u8Dir == DIO_U8_INPUT)
		  {
			  CLEAR_BIT(DDRA, copy_u8Pin );
		  }
		  break;
 246:	00 00       	nop
 248:	05 c0       	rjmp	.+10     	; 0x254 <DIO_voidSetPinDir+0x1e8>
		  }
		  else if (copy_u8Dir == DIO_U8_INPUT)
		  {
			  CLEAR_BIT(DDRB, copy_u8Pin );
		  }
		  break;
 24a:	00 00       	nop
 24c:	03 c0       	rjmp	.+6      	; 0x254 <DIO_voidSetPinDir+0x1e8>
		  }
		  else if (copy_u8Dir == DIO_U8_INPUT)
		  {
			  CLEAR_BIT(DDRC, copy_u8Pin );
		  }
		  break;
 24e:	00 00       	nop
 250:	01 c0       	rjmp	.+2      	; 0x254 <DIO_voidSetPinDir+0x1e8>
		  }
		  else if(copy_u8Dir == DIO_U8_INPUT)
		  {
			  CLEAR_BIT(DDRD, copy_u8Pin );
         }
		  break;
 252:	00 00       	nop
	}
}
 254:	00 00       	nop
 256:	0f 90       	pop	r0
 258:	0f 90       	pop	r0
 25a:	0f 90       	pop	r0
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	08 95       	ret

00000262 <DIO_voidSetPinVal>:
void DIO_voidSetPinVal(u8 Copy_u8Port, u8 copy_u8Pin, u8 copy_u8val)
{
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	00 d0       	rcall	.+0      	; 0x268 <DIO_voidSetPinVal+0x6>
 268:	1f 92       	push	r1
 26a:	cd b7       	in	r28, 0x3d	; 61
 26c:	de b7       	in	r29, 0x3e	; 62
 26e:	89 83       	std	Y+1, r24	; 0x01
 270:	6a 83       	std	Y+2, r22	; 0x02
 272:	4b 83       	std	Y+3, r20	; 0x03
              //PORTA
	switch(Copy_u8Port)
 274:	89 81       	ldd	r24, Y+1	; 0x01
 276:	88 2f       	mov	r24, r24
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	81 30       	cpi	r24, 0x01	; 1
 27c:	91 05       	cpc	r25, r1
 27e:	09 f4       	brne	.+2      	; 0x282 <DIO_voidSetPinVal+0x20>
 280:	42 c0       	rjmp	.+132    	; 0x306 <DIO_voidSetPinVal+0xa4>
 282:	82 30       	cpi	r24, 0x02	; 2
 284:	91 05       	cpc	r25, r1
 286:	1c f4       	brge	.+6      	; 0x28e <DIO_voidSetPinVal+0x2c>
 288:	89 2b       	or	r24, r25
 28a:	49 f0       	breq	.+18     	; 0x29e <DIO_voidSetPinVal+0x3c>
			  CLEAR_BIT(PORTD, copy_u8Pin );
		  }
		  break;
	}

}
 28c:	de c0       	rjmp	.+444    	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
	}
}
void DIO_voidSetPinVal(u8 Copy_u8Port, u8 copy_u8Pin, u8 copy_u8val)
{
              //PORTA
	switch(Copy_u8Port)
 28e:	82 30       	cpi	r24, 0x02	; 2
 290:	91 05       	cpc	r25, r1
 292:	09 f4       	brne	.+2      	; 0x296 <DIO_voidSetPinVal+0x34>
 294:	6c c0       	rjmp	.+216    	; 0x36e <DIO_voidSetPinVal+0x10c>
 296:	03 97       	sbiw	r24, 0x03	; 3
 298:	09 f4       	brne	.+2      	; 0x29c <DIO_voidSetPinVal+0x3a>
 29a:	9d c0       	rjmp	.+314    	; 0x3d6 <DIO_voidSetPinVal+0x174>
			  CLEAR_BIT(PORTD, copy_u8Pin );
		  }
		  break;
	}

}
 29c:	d6 c0       	rjmp	.+428    	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
{
              //PORTA
	switch(Copy_u8Port)
	{
          case DIO_U8_PORTA:
		  if (copy_u8val == DIO_U8_HIGH)
 29e:	8b 81       	ldd	r24, Y+3	; 0x03
 2a0:	81 30       	cpi	r24, 0x01	; 1
 2a2:	b1 f4       	brne	.+44     	; 0x2d0 <DIO_voidSetPinVal+0x6e>
		  {
			  SET_BIT(PORTA, copy_u8Pin );
 2a4:	8b e3       	ldi	r24, 0x3B	; 59
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	fc 01       	movw	r30, r24
 2aa:	80 81       	ld	r24, Z
 2ac:	48 2f       	mov	r20, r24
 2ae:	8a 81       	ldd	r24, Y+2	; 0x02
 2b0:	28 2f       	mov	r18, r24
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_voidSetPinVal+0x5c>
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	2a 95       	dec	r18
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <DIO_voidSetPinVal+0x58>
 2c2:	24 2f       	mov	r18, r20
 2c4:	28 2b       	or	r18, r24
 2c6:	8b e3       	ldi	r24, 0x3B	; 59
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	fc 01       	movw	r30, r24
 2cc:	20 83       	st	Z, r18
		  }
		  else if (copy_u8val == DIO_U8_LOW)
		  {
			  CLEAR_BIT(PORTA, copy_u8Pin );
		  }
		  break;
 2ce:	b6 c0       	rjmp	.+364    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
          case DIO_U8_PORTA:
		  if (copy_u8val == DIO_U8_HIGH)
		  {
			  SET_BIT(PORTA, copy_u8Pin );
		  }
		  else if (copy_u8val == DIO_U8_LOW)
 2d0:	8b 81       	ldd	r24, Y+3	; 0x03
 2d2:	88 23       	and	r24, r24
 2d4:	09 f0       	breq	.+2      	; 0x2d8 <DIO_voidSetPinVal+0x76>
 2d6:	b2 c0       	rjmp	.+356    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
		  {
			  CLEAR_BIT(PORTA, copy_u8Pin );
 2d8:	8b e3       	ldi	r24, 0x3B	; 59
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	fc 01       	movw	r30, r24
 2de:	80 81       	ld	r24, Z
 2e0:	48 2f       	mov	r20, r24
 2e2:	8a 81       	ldd	r24, Y+2	; 0x02
 2e4:	28 2f       	mov	r18, r24
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_voidSetPinVal+0x90>
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	2a 95       	dec	r18
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_voidSetPinVal+0x8c>
 2f6:	80 95       	com	r24
 2f8:	24 2f       	mov	r18, r20
 2fa:	28 23       	and	r18, r24
 2fc:	8b e3       	ldi	r24, 0x3B	; 59
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	fc 01       	movw	r30, r24
 302:	20 83       	st	Z, r18
		  }
		  break;
 304:	9b c0       	rjmp	.+310    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
		          //PORTB
		  case DIO_U8_PORTB:
		  if (copy_u8val == DIO_U8_HIGH)
 306:	8b 81       	ldd	r24, Y+3	; 0x03
 308:	81 30       	cpi	r24, 0x01	; 1
 30a:	b1 f4       	brne	.+44     	; 0x338 <DIO_voidSetPinVal+0xd6>
		  {
			  SET_BIT(PORTB, copy_u8Pin );
 30c:	88 e3       	ldi	r24, 0x38	; 56
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	fc 01       	movw	r30, r24
 312:	80 81       	ld	r24, Z
 314:	48 2f       	mov	r20, r24
 316:	8a 81       	ldd	r24, Y+2	; 0x02
 318:	28 2f       	mov	r18, r24
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	02 c0       	rjmp	.+4      	; 0x326 <DIO_voidSetPinVal+0xc4>
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	2a 95       	dec	r18
 328:	e2 f7       	brpl	.-8      	; 0x322 <DIO_voidSetPinVal+0xc0>
 32a:	24 2f       	mov	r18, r20
 32c:	28 2b       	or	r18, r24
 32e:	88 e3       	ldi	r24, 0x38	; 56
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	fc 01       	movw	r30, r24
 334:	20 83       	st	Z, r18
		  }
		  else if (copy_u8val == DIO_U8_LOW)
		  {
			  CLEAR_BIT(PORTB, copy_u8Pin );
		  }
		  break;
 336:	84 c0       	rjmp	.+264    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
		  case DIO_U8_PORTB:
		  if (copy_u8val == DIO_U8_HIGH)
		  {
			  SET_BIT(PORTB, copy_u8Pin );
		  }
		  else if (copy_u8val == DIO_U8_LOW)
 338:	8b 81       	ldd	r24, Y+3	; 0x03
 33a:	88 23       	and	r24, r24
 33c:	09 f0       	breq	.+2      	; 0x340 <DIO_voidSetPinVal+0xde>
 33e:	80 c0       	rjmp	.+256    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
		  {
			  CLEAR_BIT(PORTB, copy_u8Pin );
 340:	88 e3       	ldi	r24, 0x38	; 56
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	fc 01       	movw	r30, r24
 346:	80 81       	ld	r24, Z
 348:	48 2f       	mov	r20, r24
 34a:	8a 81       	ldd	r24, Y+2	; 0x02
 34c:	28 2f       	mov	r18, r24
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	02 c0       	rjmp	.+4      	; 0x35a <DIO_voidSetPinVal+0xf8>
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	2a 95       	dec	r18
 35c:	e2 f7       	brpl	.-8      	; 0x356 <DIO_voidSetPinVal+0xf4>
 35e:	80 95       	com	r24
 360:	24 2f       	mov	r18, r20
 362:	28 23       	and	r18, r24
 364:	88 e3       	ldi	r24, 0x38	; 56
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	fc 01       	movw	r30, r24
 36a:	20 83       	st	Z, r18
		  }
		  break;
 36c:	69 c0       	rjmp	.+210    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
		             //PORTC
		  case DIO_U8_PORTC:
		  if ( copy_u8val == DIO_U8_HIGH)
 36e:	8b 81       	ldd	r24, Y+3	; 0x03
 370:	81 30       	cpi	r24, 0x01	; 1
 372:	b1 f4       	brne	.+44     	; 0x3a0 <DIO_voidSetPinVal+0x13e>
		  {
			  SET_BIT(PORTC, copy_u8Pin );
 374:	85 e3       	ldi	r24, 0x35	; 53
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	fc 01       	movw	r30, r24
 37a:	80 81       	ld	r24, Z
 37c:	48 2f       	mov	r20, r24
 37e:	8a 81       	ldd	r24, Y+2	; 0x02
 380:	28 2f       	mov	r18, r24
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	02 c0       	rjmp	.+4      	; 0x38e <DIO_voidSetPinVal+0x12c>
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	2a 95       	dec	r18
 390:	e2 f7       	brpl	.-8      	; 0x38a <DIO_voidSetPinVal+0x128>
 392:	24 2f       	mov	r18, r20
 394:	28 2b       	or	r18, r24
 396:	85 e3       	ldi	r24, 0x35	; 53
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	fc 01       	movw	r30, r24
 39c:	20 83       	st	Z, r18
		  }
		  else if(copy_u8val == DIO_U8_LOW)
		  {
			  CLEAR_BIT(PORTC, copy_u8Pin );
		  }
		  break;
 39e:	52 c0       	rjmp	.+164    	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
		  case DIO_U8_PORTC:
		  if ( copy_u8val == DIO_U8_HIGH)
		  {
			  SET_BIT(PORTC, copy_u8Pin );
		  }
		  else if(copy_u8val == DIO_U8_LOW)
 3a0:	8b 81       	ldd	r24, Y+3	; 0x03
 3a2:	88 23       	and	r24, r24
 3a4:	09 f0       	breq	.+2      	; 0x3a8 <DIO_voidSetPinVal+0x146>
 3a6:	4e c0       	rjmp	.+156    	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
		  {
			  CLEAR_BIT(PORTC, copy_u8Pin );
 3a8:	85 e3       	ldi	r24, 0x35	; 53
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	fc 01       	movw	r30, r24
 3ae:	80 81       	ld	r24, Z
 3b0:	48 2f       	mov	r20, r24
 3b2:	8a 81       	ldd	r24, Y+2	; 0x02
 3b4:	28 2f       	mov	r18, r24
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_voidSetPinVal+0x160>
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	2a 95       	dec	r18
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_voidSetPinVal+0x15c>
 3c6:	80 95       	com	r24
 3c8:	24 2f       	mov	r18, r20
 3ca:	28 23       	and	r18, r24
 3cc:	85 e3       	ldi	r24, 0x35	; 53
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	fc 01       	movw	r30, r24
 3d2:	20 83       	st	Z, r18
		  }
		  break;
 3d4:	37 c0       	rjmp	.+110    	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
		             //PORTD
		  case DIO_U8_PORTD:
		  if ( copy_u8val == DIO_U8_HIGH)
 3d6:	8b 81       	ldd	r24, Y+3	; 0x03
 3d8:	81 30       	cpi	r24, 0x01	; 1
 3da:	b1 f4       	brne	.+44     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
		  {
			  SET_BIT(PORTD, copy_u8Pin );
 3dc:	82 e3       	ldi	r24, 0x32	; 50
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	fc 01       	movw	r30, r24
 3e2:	80 81       	ld	r24, Z
 3e4:	48 2f       	mov	r20, r24
 3e6:	8a 81       	ldd	r24, Y+2	; 0x02
 3e8:	28 2f       	mov	r18, r24
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <DIO_voidSetPinVal+0x194>
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	2a 95       	dec	r18
 3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <DIO_voidSetPinVal+0x190>
 3fa:	24 2f       	mov	r18, r20
 3fc:	28 2b       	or	r18, r24
 3fe:	82 e3       	ldi	r24, 0x32	; 50
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	fc 01       	movw	r30, r24
 404:	20 83       	st	Z, r18
		  }
		  else if (copy_u8val == DIO_U8_LOW)
		  {
			  CLEAR_BIT(PORTD, copy_u8Pin );
		  }
		  break;
 406:	20 c0       	rjmp	.+64     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
		  case DIO_U8_PORTD:
		  if ( copy_u8val == DIO_U8_HIGH)
		  {
			  SET_BIT(PORTD, copy_u8Pin );
		  }
		  else if (copy_u8val == DIO_U8_LOW)
 408:	8b 81       	ldd	r24, Y+3	; 0x03
 40a:	88 23       	and	r24, r24
 40c:	e9 f4       	brne	.+58     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
		  {
			  CLEAR_BIT(PORTD, copy_u8Pin );
 40e:	82 e3       	ldi	r24, 0x32	; 50
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	fc 01       	movw	r30, r24
 414:	80 81       	ld	r24, Z
 416:	48 2f       	mov	r20, r24
 418:	8a 81       	ldd	r24, Y+2	; 0x02
 41a:	28 2f       	mov	r18, r24
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	02 c0       	rjmp	.+4      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 424:	88 0f       	add	r24, r24
 426:	99 1f       	adc	r25, r25
 428:	2a 95       	dec	r18
 42a:	e2 f7       	brpl	.-8      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 42c:	80 95       	com	r24
 42e:	24 2f       	mov	r18, r20
 430:	28 23       	and	r18, r24
 432:	82 e3       	ldi	r24, 0x32	; 50
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	fc 01       	movw	r30, r24
 438:	20 83       	st	Z, r18
		  }
		  break;
 43a:	06 c0       	rjmp	.+12     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
		  }
		  else if (copy_u8val == DIO_U8_LOW)
		  {
			  CLEAR_BIT(PORTA, copy_u8Pin );
		  }
		  break;
 43c:	00 00       	nop
 43e:	05 c0       	rjmp	.+10     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
		  }
		  else if (copy_u8val == DIO_U8_LOW)
		  {
			  CLEAR_BIT(PORTB, copy_u8Pin );
		  }
		  break;
 440:	00 00       	nop
 442:	03 c0       	rjmp	.+6      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
		  }
		  else if(copy_u8val == DIO_U8_LOW)
		  {
			  CLEAR_BIT(PORTC, copy_u8Pin );
		  }
		  break;
 444:	00 00       	nop
 446:	01 c0       	rjmp	.+2      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
		  }
		  else if (copy_u8val == DIO_U8_LOW)
		  {
			  CLEAR_BIT(PORTD, copy_u8Pin );
		  }
		  break;
 448:	00 00       	nop
	}

}
 44a:	00 00       	nop
 44c:	0f 90       	pop	r0
 44e:	0f 90       	pop	r0
 450:	0f 90       	pop	r0
 452:	df 91       	pop	r29
 454:	cf 91       	pop	r28
 456:	08 95       	ret

00000458 <DIO_voidSetPortVal>:
void DIO_voidSetPortVal(u8 Copy_u8Port, u8 copy_u8val)
{
 458:	cf 93       	push	r28
 45a:	df 93       	push	r29
 45c:	00 d0       	rcall	.+0      	; 0x45e <DIO_voidSetPortVal+0x6>
 45e:	cd b7       	in	r28, 0x3d	; 61
 460:	de b7       	in	r29, 0x3e	; 62
 462:	89 83       	std	Y+1, r24	; 0x01
 464:	6a 83       	std	Y+2, r22	; 0x02
    //PORTA
      switch(Copy_u8Port)
 466:	89 81       	ldd	r24, Y+1	; 0x01
 468:	88 2f       	mov	r24, r24
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	81 30       	cpi	r24, 0x01	; 1
 46e:	91 05       	cpc	r25, r1
 470:	91 f0       	breq	.+36     	; 0x496 <DIO_voidSetPortVal+0x3e>
 472:	82 30       	cpi	r24, 0x02	; 2
 474:	91 05       	cpc	r25, r1
 476:	1c f4       	brge	.+6      	; 0x47e <DIO_voidSetPortVal+0x26>
 478:	89 2b       	or	r24, r25
 47a:	39 f0       	breq	.+14     	; 0x48a <DIO_voidSetPortVal+0x32>
	             //PORTD
          case DIO_U8_PORTD:
    	  PORTD = copy_u8val;
    	  break;
     }
}
 47c:	1e c0       	rjmp	.+60     	; 0x4ba <DIO_voidSetPortVal+0x62>

}
void DIO_voidSetPortVal(u8 Copy_u8Port, u8 copy_u8val)
{
    //PORTA
      switch(Copy_u8Port)
 47e:	82 30       	cpi	r24, 0x02	; 2
 480:	91 05       	cpc	r25, r1
 482:	79 f0       	breq	.+30     	; 0x4a2 <DIO_voidSetPortVal+0x4a>
 484:	03 97       	sbiw	r24, 0x03	; 3
 486:	99 f0       	breq	.+38     	; 0x4ae <DIO_voidSetPortVal+0x56>
	             //PORTD
          case DIO_U8_PORTD:
    	  PORTD = copy_u8val;
    	  break;
     }
}
 488:	18 c0       	rjmp	.+48     	; 0x4ba <DIO_voidSetPortVal+0x62>
{
    //PORTA
      switch(Copy_u8Port)
      {
          case DIO_U8_PORTA:
	      PORTA = copy_u8val;
 48a:	8b e3       	ldi	r24, 0x3B	; 59
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	2a 81       	ldd	r18, Y+2	; 0x02
 490:	fc 01       	movw	r30, r24
 492:	20 83       	st	Z, r18
	      break;
 494:	12 c0       	rjmp	.+36     	; 0x4ba <DIO_voidSetPortVal+0x62>
	          //PORTB
          case DIO_U8_PORTB:
    	  PORTB = copy_u8val;
 496:	88 e3       	ldi	r24, 0x38	; 56
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	2a 81       	ldd	r18, Y+2	; 0x02
 49c:	fc 01       	movw	r30, r24
 49e:	20 83       	st	Z, r18
    	  break;
 4a0:	0c c0       	rjmp	.+24     	; 0x4ba <DIO_voidSetPortVal+0x62>
	             //PORTC
          case DIO_U8_PORTC:
    	  PORTC = copy_u8val;
 4a2:	85 e3       	ldi	r24, 0x35	; 53
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	2a 81       	ldd	r18, Y+2	; 0x02
 4a8:	fc 01       	movw	r30, r24
 4aa:	20 83       	st	Z, r18
    	  break;
 4ac:	06 c0       	rjmp	.+12     	; 0x4ba <DIO_voidSetPortVal+0x62>
	             //PORTD
          case DIO_U8_PORTD:
    	  PORTD = copy_u8val;
 4ae:	82 e3       	ldi	r24, 0x32	; 50
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	2a 81       	ldd	r18, Y+2	; 0x02
 4b4:	fc 01       	movw	r30, r24
 4b6:	20 83       	st	Z, r18
    	  break;
 4b8:	00 00       	nop
     }
}
 4ba:	00 00       	nop
 4bc:	0f 90       	pop	r0
 4be:	0f 90       	pop	r0
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	08 95       	ret

000004c6 <DIO_u8GetPinVal>:

u8 DIO_u8GetPinVal(u8 Copy_u8Port, u8 copy_u8Pin)
{
 4c6:	cf 93       	push	r28
 4c8:	df 93       	push	r29
 4ca:	00 d0       	rcall	.+0      	; 0x4cc <DIO_u8GetPinVal+0x6>
 4cc:	1f 92       	push	r1
 4ce:	cd b7       	in	r28, 0x3d	; 61
 4d0:	de b7       	in	r29, 0x3e	; 62
 4d2:	8a 83       	std	Y+2, r24	; 0x02
 4d4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Val =0;
 4d6:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
 4d8:	8a 81       	ldd	r24, Y+2	; 0x02
 4da:	88 2f       	mov	r24, r24
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	81 30       	cpi	r24, 0x01	; 1
 4e0:	91 05       	cpc	r25, r1
 4e2:	e9 f0       	breq	.+58     	; 0x51e <DIO_u8GetPinVal+0x58>
 4e4:	82 30       	cpi	r24, 0x02	; 2
 4e6:	91 05       	cpc	r25, r1
 4e8:	1c f4       	brge	.+6      	; 0x4f0 <DIO_u8GetPinVal+0x2a>
 4ea:	89 2b       	or	r24, r25
 4ec:	39 f0       	breq	.+14     	; 0x4fc <DIO_u8GetPinVal+0x36>
 4ee:	4a c0       	rjmp	.+148    	; 0x584 <DIO_u8GetPinVal+0xbe>
 4f0:	82 30       	cpi	r24, 0x02	; 2
 4f2:	91 05       	cpc	r25, r1
 4f4:	29 f1       	breq	.+74     	; 0x540 <DIO_u8GetPinVal+0x7a>
 4f6:	03 97       	sbiw	r24, 0x03	; 3
 4f8:	a1 f1       	breq	.+104    	; 0x562 <DIO_u8GetPinVal+0x9c>
 4fa:	44 c0       	rjmp	.+136    	; 0x584 <DIO_u8GetPinVal+0xbe>
	{
	       //PORTA
	  case DIO_U8_PORTA:
	   Local_u8Val= GET_BIT (PINA , copy_u8Pin);
 4fc:	89 e3       	ldi	r24, 0x39	; 57
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	fc 01       	movw	r30, r24
 502:	80 81       	ld	r24, Z
 504:	88 2f       	mov	r24, r24
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	2b 81       	ldd	r18, Y+3	; 0x03
 50a:	22 2f       	mov	r18, r18
 50c:	30 e0       	ldi	r19, 0x00	; 0
 50e:	02 c0       	rjmp	.+4      	; 0x514 <DIO_u8GetPinVal+0x4e>
 510:	95 95       	asr	r25
 512:	87 95       	ror	r24
 514:	2a 95       	dec	r18
 516:	e2 f7       	brpl	.-8      	; 0x510 <DIO_u8GetPinVal+0x4a>
 518:	81 70       	andi	r24, 0x01	; 1
 51a:	89 83       	std	Y+1, r24	; 0x01
	  break;
 51c:	33 c0       	rjmp	.+102    	; 0x584 <DIO_u8GetPinVal+0xbe>
	        //PORTB
	  case DIO_U8_PORTB:
	   Local_u8Val= GET_BIT (PINB , copy_u8Pin);
 51e:	86 e3       	ldi	r24, 0x36	; 54
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	fc 01       	movw	r30, r24
 524:	80 81       	ld	r24, Z
 526:	88 2f       	mov	r24, r24
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	2b 81       	ldd	r18, Y+3	; 0x03
 52c:	22 2f       	mov	r18, r18
 52e:	30 e0       	ldi	r19, 0x00	; 0
 530:	02 c0       	rjmp	.+4      	; 0x536 <DIO_u8GetPinVal+0x70>
 532:	95 95       	asr	r25
 534:	87 95       	ror	r24
 536:	2a 95       	dec	r18
 538:	e2 f7       	brpl	.-8      	; 0x532 <DIO_u8GetPinVal+0x6c>
 53a:	81 70       	andi	r24, 0x01	; 1
 53c:	89 83       	std	Y+1, r24	; 0x01
	  break;
 53e:	22 c0       	rjmp	.+68     	; 0x584 <DIO_u8GetPinVal+0xbe>
	        //PORTC
	  case DIO_U8_PORTC:
	   Local_u8Val= GET_BIT (PINC , copy_u8Pin);
 540:	83 e3       	ldi	r24, 0x33	; 51
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	fc 01       	movw	r30, r24
 546:	80 81       	ld	r24, Z
 548:	88 2f       	mov	r24, r24
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	2b 81       	ldd	r18, Y+3	; 0x03
 54e:	22 2f       	mov	r18, r18
 550:	30 e0       	ldi	r19, 0x00	; 0
 552:	02 c0       	rjmp	.+4      	; 0x558 <DIO_u8GetPinVal+0x92>
 554:	95 95       	asr	r25
 556:	87 95       	ror	r24
 558:	2a 95       	dec	r18
 55a:	e2 f7       	brpl	.-8      	; 0x554 <DIO_u8GetPinVal+0x8e>
 55c:	81 70       	andi	r24, 0x01	; 1
 55e:	89 83       	std	Y+1, r24	; 0x01
	  break;
 560:	11 c0       	rjmp	.+34     	; 0x584 <DIO_u8GetPinVal+0xbe>
	         //PORTD
	  case DIO_U8_PORTD:
	   Local_u8Val= GET_BIT (PIND , copy_u8Pin);
 562:	80 e3       	ldi	r24, 0x30	; 48
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	fc 01       	movw	r30, r24
 568:	80 81       	ld	r24, Z
 56a:	88 2f       	mov	r24, r24
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	2b 81       	ldd	r18, Y+3	; 0x03
 570:	22 2f       	mov	r18, r18
 572:	30 e0       	ldi	r19, 0x00	; 0
 574:	02 c0       	rjmp	.+4      	; 0x57a <DIO_u8GetPinVal+0xb4>
 576:	95 95       	asr	r25
 578:	87 95       	ror	r24
 57a:	2a 95       	dec	r18
 57c:	e2 f7       	brpl	.-8      	; 0x576 <DIO_u8GetPinVal+0xb0>
 57e:	81 70       	andi	r24, 0x01	; 1
 580:	89 83       	std	Y+1, r24	; 0x01
	  break;
 582:	00 00       	nop


	}
	return Local_u8Val;
 584:	89 81       	ldd	r24, Y+1	; 0x01
}
 586:	0f 90       	pop	r0
 588:	0f 90       	pop	r0
 58a:	0f 90       	pop	r0
 58c:	df 91       	pop	r29
 58e:	cf 91       	pop	r28
 590:	08 95       	ret

00000592 <main>:




int main()
{
 592:	cf 93       	push	r28
 594:	df 93       	push	r29
 596:	cd b7       	in	r28, 0x3d	; 61
 598:	de b7       	in	r29, 0x3e	; 62
 59a:	ec 97       	sbiw	r28, 0x3c	; 60
 59c:	0f b6       	in	r0, 0x3f	; 63
 59e:	f8 94       	cli
 5a0:	de bf       	out	0x3e, r29	; 62
 5a2:	0f be       	out	0x3f, r0	; 63
 5a4:	cd bf       	out	0x3d, r28	; 61


	DIO_voidSetPinDir(DIO_U8_PORTB, DIO_U8_PIN1, DIO_U8_OUTPUT);
 5a6:	41 e0       	ldi	r20, 0x01	; 1
 5a8:	61 e0       	ldi	r22, 0x01	; 1
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DIO_U8_PORTB, DIO_U8_PIN2, DIO_U8_OUTPUT);
 5b0:	41 e0       	ldi	r20, 0x01	; 1
 5b2:	62 e0       	ldi	r22, 0x02	; 2
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DIO_U8_PORTB, DIO_U8_PIN4, DIO_U8_OUTPUT);
 5ba:	41 e0       	ldi	r20, 0x01	; 1
 5bc:	64 e0       	ldi	r22, 0x04	; 4
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DIO_U8_PORTB, DIO_U8_PIN5, DIO_U8_OUTPUT);
 5c4:	41 e0       	ldi	r20, 0x01	; 1
 5c6:	65 e0       	ldi	r22, 0x05	; 5
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DIO_U8_PORTB, DIO_U8_PIN6, DIO_U8_OUTPUT);
 5ce:	41 e0       	ldi	r20, 0x01	; 1
 5d0:	66 e0       	ldi	r22, 0x06	; 6
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DIO_U8_PORTB, DIO_U8_PIN7, DIO_U8_OUTPUT);
 5d8:	41 e0       	ldi	r20, 0x01	; 1
 5da:	67 e0       	ldi	r22, 0x07	; 7
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDir>

	DIO_voidSetPinDir(DIO_U8_PORTC, DIO_U8_PIN2, DIO_U8_OUTPUT);
 5e2:	41 e0       	ldi	r20, 0x01	; 1
 5e4:	62 e0       	ldi	r22, 0x02	; 2
 5e6:	82 e0       	ldi	r24, 0x02	; 2
 5e8:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DIO_U8_PORTC, DIO_U8_PIN3, DIO_U8_OUTPUT);
 5ec:	41 e0       	ldi	r20, 0x01	; 1
 5ee:	63 e0       	ldi	r22, 0x03	; 3
 5f0:	82 e0       	ldi	r24, 0x02	; 2
 5f2:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DIO_U8_PORTC, DIO_U8_PIN7, DIO_U8_OUTPUT);
 5f6:	41 e0       	ldi	r20, 0x01	; 1
 5f8:	67 e0       	ldi	r22, 0x07	; 7
 5fa:	82 e0       	ldi	r24, 0x02	; 2
 5fc:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDir>

	DIO_voidSetPinDir(DIO_U8_PORTD, DIO_U8_PIN0, DIO_U8_INPUT);
 600:	40 e0       	ldi	r20, 0x00	; 0
 602:	60 e0       	ldi	r22, 0x00	; 0
 604:	83 e0       	ldi	r24, 0x03	; 3
 606:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DIO_U8_PORTD, DIO_U8_PIN2, DIO_U8_INPUT);
 60a:	40 e0       	ldi	r20, 0x00	; 0
 60c:	62 e0       	ldi	r22, 0x02	; 2
 60e:	83 e0       	ldi	r24, 0x03	; 3
 610:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DIO_U8_PORTD, DIO_U8_PIN6, DIO_U8_INPUT);
 614:	40 e0       	ldi	r20, 0x00	; 0
 616:	66 e0       	ldi	r22, 0x06	; 6
 618:	83 e0       	ldi	r24, 0x03	; 3
 61a:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DIO_U8_PORTD, DIO_U8_PIN3, DIO_U8_OUTPUT);
 61e:	41 e0       	ldi	r20, 0x01	; 1
 620:	63 e0       	ldi	r22, 0x03	; 3
 622:	83 e0       	ldi	r24, 0x03	; 3
 624:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDir>


	DIO_voidSetPinVal(DIO_U8_PORTD, DIO_U8_PIN0, DIO_U8_LOW);
 628:	40 e0       	ldi	r20, 0x00	; 0
 62a:	60 e0       	ldi	r22, 0x00	; 0
 62c:	83 e0       	ldi	r24, 0x03	; 3
 62e:	0e 94 31 01 	call	0x262	; 0x262 <DIO_voidSetPinVal>
	DIO_voidSetPinVal(DIO_U8_PORTD, DIO_U8_PIN2, DIO_U8_LOW);
 632:	40 e0       	ldi	r20, 0x00	; 0
 634:	62 e0       	ldi	r22, 0x02	; 2
 636:	83 e0       	ldi	r24, 0x03	; 3
 638:	0e 94 31 01 	call	0x262	; 0x262 <DIO_voidSetPinVal>
	DIO_voidSetPinVal(DIO_U8_PORTD, DIO_U8_PIN6, DIO_U8_LOW);
 63c:	40 e0       	ldi	r20, 0x00	; 0
 63e:	66 e0       	ldi	r22, 0x06	; 6
 640:	83 e0       	ldi	r24, 0x03	; 3
 642:	0e 94 31 01 	call	0x262	; 0x262 <DIO_voidSetPinVal>


 //   u8 default_password = 49;

	 u8 toggleledState1=0;
 646:	19 82       	std	Y+1, r1	; 0x01
	  u8 toggleledState2=1;
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	8a 83       	std	Y+2, r24	; 0x02

	    u8 counter_ones = 0;
 64c:	1b 82       	std	Y+3, r1	; 0x03
		u8 counter_Tens= 0 ;
 64e:	1c 82       	std	Y+4, r1	; 0x04
	while(1)
	{
		DIO_voidSetPinVal(DIO_U8_PORTB, DIO_U8_PIN1, DIO_U8_LOW);
 650:	40 e0       	ldi	r20, 0x00	; 0
 652:	61 e0       	ldi	r22, 0x01	; 1
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	0e 94 31 01 	call	0x262	; 0x262 <DIO_voidSetPinVal>
        DIO_voidSetPinVal(DIO_U8_PORTB, DIO_U8_PIN2, DIO_U8_HIGH);
 65a:	41 e0       	ldi	r20, 0x01	; 1
 65c:	62 e0       	ldi	r22, 0x02	; 2
 65e:	81 e0       	ldi	r24, 0x01	; 1
 660:	0e 94 31 01 	call	0x262	; 0x262 <DIO_voidSetPinVal>
		DIO_voidSetPortVal(DIO_U8_PORTB, (0b1101|(counter_ones<<4)));
 664:	8b 81       	ldd	r24, Y+3	; 0x03
 666:	88 2f       	mov	r24, r24
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	82 95       	swap	r24
 66c:	92 95       	swap	r25
 66e:	90 7f       	andi	r25, 0xF0	; 240
 670:	98 27       	eor	r25, r24
 672:	80 7f       	andi	r24, 0xF0	; 240
 674:	98 27       	eor	r25, r24
 676:	8d 60       	ori	r24, 0x0D	; 13
 678:	68 2f       	mov	r22, r24
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_voidSetPortVal>
 680:	80 e0       	ldi	r24, 0x00	; 0
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	a0 ea       	ldi	r26, 0xA0	; 160
 686:	b0 e4       	ldi	r27, 0x40	; 64
 688:	8b 8b       	std	Y+19, r24	; 0x13
 68a:	9c 8b       	std	Y+20, r25	; 0x14
 68c:	ad 8b       	std	Y+21, r26	; 0x15
 68e:	be 8b       	std	Y+22, r27	; 0x16

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 690:	20 e0       	ldi	r18, 0x00	; 0
 692:	30 e0       	ldi	r19, 0x00	; 0
 694:	4a e7       	ldi	r20, 0x7A	; 122
 696:	55 e4       	ldi	r21, 0x45	; 69
 698:	6b 89       	ldd	r22, Y+19	; 0x13
 69a:	7c 89       	ldd	r23, Y+20	; 0x14
 69c:	8d 89       	ldd	r24, Y+21	; 0x15
 69e:	9e 89       	ldd	r25, Y+22	; 0x16
 6a0:	0e 94 20 06 	call	0xc40	; 0xc40 <__mulsf3>
 6a4:	dc 01       	movw	r26, r24
 6a6:	cb 01       	movw	r24, r22
 6a8:	8f 8b       	std	Y+23, r24	; 0x17
 6aa:	98 8f       	std	Y+24, r25	; 0x18
 6ac:	a9 8f       	std	Y+25, r26	; 0x19
 6ae:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
 6b0:	20 e0       	ldi	r18, 0x00	; 0
 6b2:	30 e0       	ldi	r19, 0x00	; 0
 6b4:	40 e8       	ldi	r20, 0x80	; 128
 6b6:	5f e3       	ldi	r21, 0x3F	; 63
 6b8:	6f 89       	ldd	r22, Y+23	; 0x17
 6ba:	78 8d       	ldd	r23, Y+24	; 0x18
 6bc:	89 8d       	ldd	r24, Y+25	; 0x19
 6be:	9a 8d       	ldd	r25, Y+26	; 0x1a
 6c0:	0e 94 9a 05 	call	0xb34	; 0xb34 <__cmpsf2>
 6c4:	88 23       	and	r24, r24
 6c6:	2c f4       	brge	.+10     	; 0x6d2 <main+0x140>
		__ticks = 1;
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	9c 8f       	std	Y+28, r25	; 0x1c
 6ce:	8b 8f       	std	Y+27, r24	; 0x1b
 6d0:	3f c0       	rjmp	.+126    	; 0x750 <main+0x1be>
	else if (__tmp > 65535)
 6d2:	20 e0       	ldi	r18, 0x00	; 0
 6d4:	3f ef       	ldi	r19, 0xFF	; 255
 6d6:	4f e7       	ldi	r20, 0x7F	; 127
 6d8:	57 e4       	ldi	r21, 0x47	; 71
 6da:	6f 89       	ldd	r22, Y+23	; 0x17
 6dc:	78 8d       	ldd	r23, Y+24	; 0x18
 6de:	89 8d       	ldd	r24, Y+25	; 0x19
 6e0:	9a 8d       	ldd	r25, Y+26	; 0x1a
 6e2:	0e 94 1b 06 	call	0xc36	; 0xc36 <__gesf2>
 6e6:	18 16       	cp	r1, r24
 6e8:	4c f5       	brge	.+82     	; 0x73c <main+0x1aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 6ea:	20 e0       	ldi	r18, 0x00	; 0
 6ec:	30 e0       	ldi	r19, 0x00	; 0
 6ee:	40 e2       	ldi	r20, 0x20	; 32
 6f0:	51 e4       	ldi	r21, 0x41	; 65
 6f2:	6b 89       	ldd	r22, Y+19	; 0x13
 6f4:	7c 89       	ldd	r23, Y+20	; 0x14
 6f6:	8d 89       	ldd	r24, Y+21	; 0x15
 6f8:	9e 89       	ldd	r25, Y+22	; 0x16
 6fa:	0e 94 20 06 	call	0xc40	; 0xc40 <__mulsf3>
 6fe:	dc 01       	movw	r26, r24
 700:	cb 01       	movw	r24, r22
 702:	bc 01       	movw	r22, r24
 704:	cd 01       	movw	r24, r26
 706:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__fixunssfsi>
 70a:	dc 01       	movw	r26, r24
 70c:	cb 01       	movw	r24, r22
 70e:	9c 8f       	std	Y+28, r25	; 0x1c
 710:	8b 8f       	std	Y+27, r24	; 0x1b
 712:	0f c0       	rjmp	.+30     	; 0x732 <main+0x1a0>
 714:	80 e9       	ldi	r24, 0x90	; 144
 716:	91 e0       	ldi	r25, 0x01	; 1
 718:	9e 8f       	std	Y+30, r25	; 0x1e
 71a:	8d 8f       	std	Y+29, r24	; 0x1d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 71c:	8d 8d       	ldd	r24, Y+29	; 0x1d
 71e:	9e 8d       	ldd	r25, Y+30	; 0x1e
 720:	01 97       	sbiw	r24, 0x01	; 1
 722:	f1 f7       	brne	.-4      	; 0x720 <main+0x18e>
 724:	9e 8f       	std	Y+30, r25	; 0x1e
 726:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 728:	8b 8d       	ldd	r24, Y+27	; 0x1b
 72a:	9c 8d       	ldd	r25, Y+28	; 0x1c
 72c:	01 97       	sbiw	r24, 0x01	; 1
 72e:	9c 8f       	std	Y+28, r25	; 0x1c
 730:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 732:	8b 8d       	ldd	r24, Y+27	; 0x1b
 734:	9c 8d       	ldd	r25, Y+28	; 0x1c
 736:	89 2b       	or	r24, r25
 738:	69 f7       	brne	.-38     	; 0x714 <main+0x182>
 73a:	14 c0       	rjmp	.+40     	; 0x764 <main+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 73c:	6f 89       	ldd	r22, Y+23	; 0x17
 73e:	78 8d       	ldd	r23, Y+24	; 0x18
 740:	89 8d       	ldd	r24, Y+25	; 0x19
 742:	9a 8d       	ldd	r25, Y+26	; 0x1a
 744:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__fixunssfsi>
 748:	dc 01       	movw	r26, r24
 74a:	cb 01       	movw	r24, r22
 74c:	9c 8f       	std	Y+28, r25	; 0x1c
 74e:	8b 8f       	std	Y+27, r24	; 0x1b
 750:	8b 8d       	ldd	r24, Y+27	; 0x1b
 752:	9c 8d       	ldd	r25, Y+28	; 0x1c
 754:	98 a3       	std	Y+32, r25	; 0x20
 756:	8f 8f       	std	Y+31, r24	; 0x1f
 758:	8f 8d       	ldd	r24, Y+31	; 0x1f
 75a:	98 a1       	ldd	r25, Y+32	; 0x20
 75c:	01 97       	sbiw	r24, 0x01	; 1
 75e:	f1 f7       	brne	.-4      	; 0x75c <main+0x1ca>
 760:	98 a3       	std	Y+32, r25	; 0x20
 762:	8f 8f       	std	Y+31, r24	; 0x1f
		_delay_ms(5);

    	DIO_voidSetPinVal(DIO_U8_PORTB, DIO_U8_PIN2, DIO_U8_LOW);
 764:	40 e0       	ldi	r20, 0x00	; 0
 766:	62 e0       	ldi	r22, 0x02	; 2
 768:	81 e0       	ldi	r24, 0x01	; 1
 76a:	0e 94 31 01 	call	0x262	; 0x262 <DIO_voidSetPinVal>
        DIO_voidSetPinVal(DIO_U8_PORTB, DIO_U8_PIN1, DIO_U8_HIGH);
 76e:	41 e0       	ldi	r20, 0x01	; 1
 770:	61 e0       	ldi	r22, 0x01	; 1
 772:	81 e0       	ldi	r24, 0x01	; 1
 774:	0e 94 31 01 	call	0x262	; 0x262 <DIO_voidSetPinVal>
		DIO_voidSetPortVal(DIO_U8_PORTB, (0b1011|(counter_Tens<<4)));
 778:	8c 81       	ldd	r24, Y+4	; 0x04
 77a:	88 2f       	mov	r24, r24
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	82 95       	swap	r24
 780:	92 95       	swap	r25
 782:	90 7f       	andi	r25, 0xF0	; 240
 784:	98 27       	eor	r25, r24
 786:	80 7f       	andi	r24, 0xF0	; 240
 788:	98 27       	eor	r25, r24
 78a:	8b 60       	ori	r24, 0x0B	; 11
 78c:	68 2f       	mov	r22, r24
 78e:	81 e0       	ldi	r24, 0x01	; 1
 790:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_voidSetPortVal>
 794:	80 e0       	ldi	r24, 0x00	; 0
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	a0 ea       	ldi	r26, 0xA0	; 160
 79a:	b0 e4       	ldi	r27, 0x40	; 64
 79c:	8d 83       	std	Y+5, r24	; 0x05
 79e:	9e 83       	std	Y+6, r25	; 0x06
 7a0:	af 83       	std	Y+7, r26	; 0x07
 7a2:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 7a4:	20 e0       	ldi	r18, 0x00	; 0
 7a6:	30 e0       	ldi	r19, 0x00	; 0
 7a8:	4a e7       	ldi	r20, 0x7A	; 122
 7aa:	55 e4       	ldi	r21, 0x45	; 69
 7ac:	6d 81       	ldd	r22, Y+5	; 0x05
 7ae:	7e 81       	ldd	r23, Y+6	; 0x06
 7b0:	8f 81       	ldd	r24, Y+7	; 0x07
 7b2:	98 85       	ldd	r25, Y+8	; 0x08
 7b4:	0e 94 20 06 	call	0xc40	; 0xc40 <__mulsf3>
 7b8:	dc 01       	movw	r26, r24
 7ba:	cb 01       	movw	r24, r22
 7bc:	89 87       	std	Y+9, r24	; 0x09
 7be:	9a 87       	std	Y+10, r25	; 0x0a
 7c0:	ab 87       	std	Y+11, r26	; 0x0b
 7c2:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 7c4:	20 e0       	ldi	r18, 0x00	; 0
 7c6:	30 e0       	ldi	r19, 0x00	; 0
 7c8:	40 e8       	ldi	r20, 0x80	; 128
 7ca:	5f e3       	ldi	r21, 0x3F	; 63
 7cc:	69 85       	ldd	r22, Y+9	; 0x09
 7ce:	7a 85       	ldd	r23, Y+10	; 0x0a
 7d0:	8b 85       	ldd	r24, Y+11	; 0x0b
 7d2:	9c 85       	ldd	r25, Y+12	; 0x0c
 7d4:	0e 94 9a 05 	call	0xb34	; 0xb34 <__cmpsf2>
 7d8:	88 23       	and	r24, r24
 7da:	2c f4       	brge	.+10     	; 0x7e6 <main+0x254>
		__ticks = 1;
 7dc:	81 e0       	ldi	r24, 0x01	; 1
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	9e 87       	std	Y+14, r25	; 0x0e
 7e2:	8d 87       	std	Y+13, r24	; 0x0d
 7e4:	3f c0       	rjmp	.+126    	; 0x864 <__stack+0x5>
	else if (__tmp > 65535)
 7e6:	20 e0       	ldi	r18, 0x00	; 0
 7e8:	3f ef       	ldi	r19, 0xFF	; 255
 7ea:	4f e7       	ldi	r20, 0x7F	; 127
 7ec:	57 e4       	ldi	r21, 0x47	; 71
 7ee:	69 85       	ldd	r22, Y+9	; 0x09
 7f0:	7a 85       	ldd	r23, Y+10	; 0x0a
 7f2:	8b 85       	ldd	r24, Y+11	; 0x0b
 7f4:	9c 85       	ldd	r25, Y+12	; 0x0c
 7f6:	0e 94 1b 06 	call	0xc36	; 0xc36 <__gesf2>
 7fa:	18 16       	cp	r1, r24
 7fc:	4c f5       	brge	.+82     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 7fe:	20 e0       	ldi	r18, 0x00	; 0
 800:	30 e0       	ldi	r19, 0x00	; 0
 802:	40 e2       	ldi	r20, 0x20	; 32
 804:	51 e4       	ldi	r21, 0x41	; 65
 806:	6d 81       	ldd	r22, Y+5	; 0x05
 808:	7e 81       	ldd	r23, Y+6	; 0x06
 80a:	8f 81       	ldd	r24, Y+7	; 0x07
 80c:	98 85       	ldd	r25, Y+8	; 0x08
 80e:	0e 94 20 06 	call	0xc40	; 0xc40 <__mulsf3>
 812:	dc 01       	movw	r26, r24
 814:	cb 01       	movw	r24, r22
 816:	bc 01       	movw	r22, r24
 818:	cd 01       	movw	r24, r26
 81a:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__fixunssfsi>
 81e:	dc 01       	movw	r26, r24
 820:	cb 01       	movw	r24, r22
 822:	9e 87       	std	Y+14, r25	; 0x0e
 824:	8d 87       	std	Y+13, r24	; 0x0d
 826:	0f c0       	rjmp	.+30     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 828:	80 e9       	ldi	r24, 0x90	; 144
 82a:	91 e0       	ldi	r25, 0x01	; 1
 82c:	98 8b       	std	Y+16, r25	; 0x10
 82e:	8f 87       	std	Y+15, r24	; 0x0f
 830:	8f 85       	ldd	r24, Y+15	; 0x0f
 832:	98 89       	ldd	r25, Y+16	; 0x10
 834:	01 97       	sbiw	r24, 0x01	; 1
 836:	f1 f7       	brne	.-4      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 838:	98 8b       	std	Y+16, r25	; 0x10
 83a:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 83c:	8d 85       	ldd	r24, Y+13	; 0x0d
 83e:	9e 85       	ldd	r25, Y+14	; 0x0e
 840:	01 97       	sbiw	r24, 0x01	; 1
 842:	9e 87       	std	Y+14, r25	; 0x0e
 844:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 846:	8d 85       	ldd	r24, Y+13	; 0x0d
 848:	9e 85       	ldd	r25, Y+14	; 0x0e
 84a:	89 2b       	or	r24, r25
 84c:	69 f7       	brne	.-38     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 84e:	14 c0       	rjmp	.+40     	; 0x878 <__stack+0x19>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 850:	69 85       	ldd	r22, Y+9	; 0x09
 852:	7a 85       	ldd	r23, Y+10	; 0x0a
 854:	8b 85       	ldd	r24, Y+11	; 0x0b
 856:	9c 85       	ldd	r25, Y+12	; 0x0c
 858:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__fixunssfsi>
 85c:	dc 01       	movw	r26, r24
 85e:	cb 01       	movw	r24, r22
 860:	9e 87       	std	Y+14, r25	; 0x0e
 862:	8d 87       	std	Y+13, r24	; 0x0d
 864:	8d 85       	ldd	r24, Y+13	; 0x0d
 866:	9e 85       	ldd	r25, Y+14	; 0x0e
 868:	9a 8b       	std	Y+18, r25	; 0x12
 86a:	89 8b       	std	Y+17, r24	; 0x11
 86c:	89 89       	ldd	r24, Y+17	; 0x11
 86e:	9a 89       	ldd	r25, Y+18	; 0x12
 870:	01 97       	sbiw	r24, 0x01	; 1
 872:	f1 f7       	brne	.-4      	; 0x870 <__stack+0x11>
 874:	9a 8b       	std	Y+18, r25	; 0x12
 876:	89 8b       	std	Y+17, r24	; 0x11
		_delay_ms(5);

        if(DIO_u8GetPinVal(DIO_U8_PORTD,DIO_U8_PIN0))
 878:	60 e0       	ldi	r22, 0x00	; 0
 87a:	83 e0       	ldi	r24, 0x03	; 3
 87c:	0e 94 63 02 	call	0x4c6	; 0x4c6 <DIO_u8GetPinVal>
 880:	88 23       	and	r24, r24
 882:	81 f0       	breq	.+32     	; 0x8a4 <__stack+0x45>
	    {

			if (counter_ones == 9)
 884:	8b 81       	ldd	r24, Y+3	; 0x03
 886:	89 30       	cpi	r24, 0x09	; 9
 888:	11 f4       	brne	.+4      	; 0x88e <__stack+0x2f>
			{
				counter_ones = 0;
 88a:	1b 82       	std	Y+3, r1	; 0x03
 88c:	03 c0       	rjmp	.+6      	; 0x894 <__stack+0x35>
			}
			else
			{
				counter_ones ++ ;
 88e:	8b 81       	ldd	r24, Y+3	; 0x03
 890:	8f 5f       	subi	r24, 0xFF	; 255
 892:	8b 83       	std	Y+3, r24	; 0x03
			}

			while(DIO_u8GetPinVal(DIO_U8_PORTD,DIO_U8_PIN0)){};
 894:	00 00       	nop
 896:	60 e0       	ldi	r22, 0x00	; 0
 898:	83 e0       	ldi	r24, 0x03	; 3
 89a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <DIO_u8GetPinVal>
 89e:	88 23       	and	r24, r24
 8a0:	d1 f7       	brne	.-12     	; 0x896 <__stack+0x37>
 8a2:	d6 ce       	rjmp	.-596    	; 0x650 <main+0xbe>

	    }

        else if(DIO_u8GetPinVal(DIO_U8_PORTD,DIO_U8_PIN6))
 8a4:	66 e0       	ldi	r22, 0x06	; 6
 8a6:	83 e0       	ldi	r24, 0x03	; 3
 8a8:	0e 94 63 02 	call	0x4c6	; 0x4c6 <DIO_u8GetPinVal>
 8ac:	88 23       	and	r24, r24
 8ae:	81 f0       	breq	.+32     	; 0x8d0 <__stack+0x71>
	    	    {
    			 if (counter_Tens==9)
 8b0:	8c 81       	ldd	r24, Y+4	; 0x04
 8b2:	89 30       	cpi	r24, 0x09	; 9
 8b4:	11 f4       	brne	.+4      	; 0x8ba <__stack+0x5b>
	    			{
	    				counter_Tens=0;
 8b6:	1c 82       	std	Y+4, r1	; 0x04
 8b8:	03 c0       	rjmp	.+6      	; 0x8c0 <__stack+0x61>
	    			}
	    			else
	    			{
	    				counter_Tens++;
 8ba:	8c 81       	ldd	r24, Y+4	; 0x04
 8bc:	8f 5f       	subi	r24, 0xFF	; 255
 8be:	8c 83       	std	Y+4, r24	; 0x04
	    			}
    			while(DIO_u8GetPinVal(DIO_U8_PORTD,DIO_U8_PIN6)){};
 8c0:	00 00       	nop
 8c2:	66 e0       	ldi	r22, 0x06	; 6
 8c4:	83 e0       	ldi	r24, 0x03	; 3
 8c6:	0e 94 63 02 	call	0x4c6	; 0x4c6 <DIO_u8GetPinVal>
 8ca:	88 23       	and	r24, r24
 8cc:	d1 f7       	brne	.-12     	; 0x8c2 <__stack+0x63>
 8ce:	c0 ce       	rjmp	.-640    	; 0x650 <main+0xbe>

	    	    }



	     else if(DIO_u8GetPinVal(DIO_U8_PORTD,DIO_U8_PIN2))
 8d0:	62 e0       	ldi	r22, 0x02	; 2
 8d2:	83 e0       	ldi	r24, 0x03	; 3
 8d4:	0e 94 63 02 	call	0x4c6	; 0x4c6 <DIO_u8GetPinVal>
 8d8:	88 23       	and	r24, r24
 8da:	09 f4       	brne	.+2      	; 0x8de <__stack+0x7f>
 8dc:	b9 ce       	rjmp	.-654    	; 0x650 <main+0xbe>
	     {
	    	 if ((counter_ones==9)&(counter_Tens==4))
 8de:	91 e0       	ldi	r25, 0x01	; 1
 8e0:	8b 81       	ldd	r24, Y+3	; 0x03
 8e2:	89 30       	cpi	r24, 0x09	; 9
 8e4:	09 f0       	breq	.+2      	; 0x8e8 <__stack+0x89>
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	81 e0       	ldi	r24, 0x01	; 1
 8ea:	2c 81       	ldd	r18, Y+4	; 0x04
 8ec:	24 30       	cpi	r18, 0x04	; 4
 8ee:	09 f0       	breq	.+2      	; 0x8f2 <__stack+0x93>
 8f0:	80 e0       	ldi	r24, 0x00	; 0
 8f2:	89 23       	and	r24, r25
 8f4:	88 23       	and	r24, r24
 8f6:	31 f0       	breq	.+12     	; 0x904 <__stack+0xa5>
	    	 {
	    			DIO_voidSetPinVal(DIO_U8_PORTD, DIO_U8_PIN3, DIO_U8_HIGH);
 8f8:	41 e0       	ldi	r20, 0x01	; 1
 8fa:	63 e0       	ldi	r22, 0x03	; 3
 8fc:	83 e0       	ldi	r24, 0x03	; 3
 8fe:	0e 94 31 01 	call	0x262	; 0x262 <DIO_voidSetPinVal>
                              CLEAR_BIT(MCUCSR,DIO_U8_PIN4);
                       	    }
                }

	    	 }
	           	 while(DIO_u8GetPinVal(DIO_U8_PORTD,DIO_U8_PIN6)){};
 902:	11 c1       	rjmp	.+546    	; 0xb26 <__stack+0x2c7>
	    	 {
	    			DIO_voidSetPinVal(DIO_U8_PORTD, DIO_U8_PIN3, DIO_U8_HIGH);
	    	 }
	    	 else
	    	 {
	    		 DIO_voidSetPinVal(DIO_U8_PORTD, DIO_U8_PIN3, DIO_U8_LOW);
 904:	40 e0       	ldi	r20, 0x00	; 0
 906:	63 e0       	ldi	r22, 0x03	; 3
 908:	83 e0       	ldi	r24, 0x03	; 3
 90a:	0e 94 31 01 	call	0x262	; 0x262 <DIO_voidSetPinVal>
                while(1)
                {
	    		    DIO_voidSetPinVal(DIO_U8_PORTC, DIO_U8_PIN3, DIO_U8_HIGH);
 90e:	41 e0       	ldi	r20, 0x01	; 1
 910:	63 e0       	ldi	r22, 0x03	; 3
 912:	82 e0       	ldi	r24, 0x02	; 2
 914:	0e 94 31 01 	call	0x262	; 0x262 <DIO_voidSetPinVal>
	    			TOGGLE_BIT(toggleledState1,0);
 918:	99 81       	ldd	r25, Y+1	; 0x01
 91a:	81 e0       	ldi	r24, 0x01	; 1
 91c:	89 27       	eor	r24, r25
 91e:	89 83       	std	Y+1, r24	; 0x01
                    DIO_voidSetPinVal(DIO_U8_PORTC, DIO_U8_PIN2, toggleledState1);
 920:	49 81       	ldd	r20, Y+1	; 0x01
 922:	62 e0       	ldi	r22, 0x02	; 2
 924:	82 e0       	ldi	r24, 0x02	; 2
 926:	0e 94 31 01 	call	0x262	; 0x262 <DIO_voidSetPinVal>
 92a:	80 e0       	ldi	r24, 0x00	; 0
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	a0 ef       	ldi	r26, 0xF0	; 240
 930:	b1 e4       	ldi	r27, 0x41	; 65
 932:	8f a7       	std	Y+47, r24	; 0x2f
 934:	98 ab       	std	Y+48, r25	; 0x30
 936:	a9 ab       	std	Y+49, r26	; 0x31
 938:	ba ab       	std	Y+50, r27	; 0x32

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 93a:	20 e0       	ldi	r18, 0x00	; 0
 93c:	30 e0       	ldi	r19, 0x00	; 0
 93e:	4a e7       	ldi	r20, 0x7A	; 122
 940:	55 e4       	ldi	r21, 0x45	; 69
 942:	6f a5       	ldd	r22, Y+47	; 0x2f
 944:	78 a9       	ldd	r23, Y+48	; 0x30
 946:	89 a9       	ldd	r24, Y+49	; 0x31
 948:	9a a9       	ldd	r25, Y+50	; 0x32
 94a:	0e 94 20 06 	call	0xc40	; 0xc40 <__mulsf3>
 94e:	dc 01       	movw	r26, r24
 950:	cb 01       	movw	r24, r22
 952:	8b ab       	std	Y+51, r24	; 0x33
 954:	9c ab       	std	Y+52, r25	; 0x34
 956:	ad ab       	std	Y+53, r26	; 0x35
 958:	be ab       	std	Y+54, r27	; 0x36
	if (__tmp < 1.0)
 95a:	20 e0       	ldi	r18, 0x00	; 0
 95c:	30 e0       	ldi	r19, 0x00	; 0
 95e:	40 e8       	ldi	r20, 0x80	; 128
 960:	5f e3       	ldi	r21, 0x3F	; 63
 962:	6b a9       	ldd	r22, Y+51	; 0x33
 964:	7c a9       	ldd	r23, Y+52	; 0x34
 966:	8d a9       	ldd	r24, Y+53	; 0x35
 968:	9e a9       	ldd	r25, Y+54	; 0x36
 96a:	0e 94 9a 05 	call	0xb34	; 0xb34 <__cmpsf2>
 96e:	88 23       	and	r24, r24
 970:	2c f4       	brge	.+10     	; 0x97c <__stack+0x11d>
		__ticks = 1;
 972:	81 e0       	ldi	r24, 0x01	; 1
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	98 af       	std	Y+56, r25	; 0x38
 978:	8f ab       	std	Y+55, r24	; 0x37
 97a:	3f c0       	rjmp	.+126    	; 0x9fa <__stack+0x19b>
	else if (__tmp > 65535)
 97c:	20 e0       	ldi	r18, 0x00	; 0
 97e:	3f ef       	ldi	r19, 0xFF	; 255
 980:	4f e7       	ldi	r20, 0x7F	; 127
 982:	57 e4       	ldi	r21, 0x47	; 71
 984:	6b a9       	ldd	r22, Y+51	; 0x33
 986:	7c a9       	ldd	r23, Y+52	; 0x34
 988:	8d a9       	ldd	r24, Y+53	; 0x35
 98a:	9e a9       	ldd	r25, Y+54	; 0x36
 98c:	0e 94 1b 06 	call	0xc36	; 0xc36 <__gesf2>
 990:	18 16       	cp	r1, r24
 992:	4c f5       	brge	.+82     	; 0x9e6 <__stack+0x187>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 994:	20 e0       	ldi	r18, 0x00	; 0
 996:	30 e0       	ldi	r19, 0x00	; 0
 998:	40 e2       	ldi	r20, 0x20	; 32
 99a:	51 e4       	ldi	r21, 0x41	; 65
 99c:	6f a5       	ldd	r22, Y+47	; 0x2f
 99e:	78 a9       	ldd	r23, Y+48	; 0x30
 9a0:	89 a9       	ldd	r24, Y+49	; 0x31
 9a2:	9a a9       	ldd	r25, Y+50	; 0x32
 9a4:	0e 94 20 06 	call	0xc40	; 0xc40 <__mulsf3>
 9a8:	dc 01       	movw	r26, r24
 9aa:	cb 01       	movw	r24, r22
 9ac:	bc 01       	movw	r22, r24
 9ae:	cd 01       	movw	r24, r26
 9b0:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__fixunssfsi>
 9b4:	dc 01       	movw	r26, r24
 9b6:	cb 01       	movw	r24, r22
 9b8:	98 af       	std	Y+56, r25	; 0x38
 9ba:	8f ab       	std	Y+55, r24	; 0x37
 9bc:	0f c0       	rjmp	.+30     	; 0x9dc <__stack+0x17d>
 9be:	80 e9       	ldi	r24, 0x90	; 144
 9c0:	91 e0       	ldi	r25, 0x01	; 1
 9c2:	9a af       	std	Y+58, r25	; 0x3a
 9c4:	89 af       	std	Y+57, r24	; 0x39
 9c6:	89 ad       	ldd	r24, Y+57	; 0x39
 9c8:	9a ad       	ldd	r25, Y+58	; 0x3a
 9ca:	01 97       	sbiw	r24, 0x01	; 1
 9cc:	f1 f7       	brne	.-4      	; 0x9ca <__stack+0x16b>
 9ce:	9a af       	std	Y+58, r25	; 0x3a
 9d0:	89 af       	std	Y+57, r24	; 0x39
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 9d2:	8f a9       	ldd	r24, Y+55	; 0x37
 9d4:	98 ad       	ldd	r25, Y+56	; 0x38
 9d6:	01 97       	sbiw	r24, 0x01	; 1
 9d8:	98 af       	std	Y+56, r25	; 0x38
 9da:	8f ab       	std	Y+55, r24	; 0x37
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 9dc:	8f a9       	ldd	r24, Y+55	; 0x37
 9de:	98 ad       	ldd	r25, Y+56	; 0x38
 9e0:	89 2b       	or	r24, r25
 9e2:	69 f7       	brne	.-38     	; 0x9be <__stack+0x15f>
 9e4:	14 c0       	rjmp	.+40     	; 0xa0e <__stack+0x1af>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 9e6:	6b a9       	ldd	r22, Y+51	; 0x33
 9e8:	7c a9       	ldd	r23, Y+52	; 0x34
 9ea:	8d a9       	ldd	r24, Y+53	; 0x35
 9ec:	9e a9       	ldd	r25, Y+54	; 0x36
 9ee:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__fixunssfsi>
 9f2:	dc 01       	movw	r26, r24
 9f4:	cb 01       	movw	r24, r22
 9f6:	98 af       	std	Y+56, r25	; 0x38
 9f8:	8f ab       	std	Y+55, r24	; 0x37
 9fa:	8f a9       	ldd	r24, Y+55	; 0x37
 9fc:	98 ad       	ldd	r25, Y+56	; 0x38
 9fe:	9c af       	std	Y+60, r25	; 0x3c
 a00:	8b af       	std	Y+59, r24	; 0x3b
 a02:	8b ad       	ldd	r24, Y+59	; 0x3b
 a04:	9c ad       	ldd	r25, Y+60	; 0x3c
 a06:	01 97       	sbiw	r24, 0x01	; 1
 a08:	f1 f7       	brne	.-4      	; 0xa06 <__stack+0x1a7>
 a0a:	9c af       	std	Y+60, r25	; 0x3c
 a0c:	8b af       	std	Y+59, r24	; 0x3b
                        _delay_ms(30);
	    			TOGGLE_BIT(toggleledState2,0);
 a0e:	9a 81       	ldd	r25, Y+2	; 0x02
 a10:	81 e0       	ldi	r24, 0x01	; 1
 a12:	89 27       	eor	r24, r25
 a14:	8a 83       	std	Y+2, r24	; 0x02
                    DIO_voidSetPinVal(DIO_U8_PORTC, DIO_U8_PIN7, toggleledState2);
 a16:	4a 81       	ldd	r20, Y+2	; 0x02
 a18:	67 e0       	ldi	r22, 0x07	; 7
 a1a:	82 e0       	ldi	r24, 0x02	; 2
 a1c:	0e 94 31 01 	call	0x262	; 0x262 <DIO_voidSetPinVal>
 a20:	80 e0       	ldi	r24, 0x00	; 0
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	a0 ea       	ldi	r26, 0xA0	; 160
 a26:	b1 e4       	ldi	r27, 0x41	; 65
 a28:	89 a3       	std	Y+33, r24	; 0x21
 a2a:	9a a3       	std	Y+34, r25	; 0x22
 a2c:	ab a3       	std	Y+35, r26	; 0x23
 a2e:	bc a3       	std	Y+36, r27	; 0x24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 a30:	20 e0       	ldi	r18, 0x00	; 0
 a32:	30 e0       	ldi	r19, 0x00	; 0
 a34:	4a e7       	ldi	r20, 0x7A	; 122
 a36:	55 e4       	ldi	r21, 0x45	; 69
 a38:	69 a1       	ldd	r22, Y+33	; 0x21
 a3a:	7a a1       	ldd	r23, Y+34	; 0x22
 a3c:	8b a1       	ldd	r24, Y+35	; 0x23
 a3e:	9c a1       	ldd	r25, Y+36	; 0x24
 a40:	0e 94 20 06 	call	0xc40	; 0xc40 <__mulsf3>
 a44:	dc 01       	movw	r26, r24
 a46:	cb 01       	movw	r24, r22
 a48:	8d a3       	std	Y+37, r24	; 0x25
 a4a:	9e a3       	std	Y+38, r25	; 0x26
 a4c:	af a3       	std	Y+39, r26	; 0x27
 a4e:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
 a50:	20 e0       	ldi	r18, 0x00	; 0
 a52:	30 e0       	ldi	r19, 0x00	; 0
 a54:	40 e8       	ldi	r20, 0x80	; 128
 a56:	5f e3       	ldi	r21, 0x3F	; 63
 a58:	6d a1       	ldd	r22, Y+37	; 0x25
 a5a:	7e a1       	ldd	r23, Y+38	; 0x26
 a5c:	8f a1       	ldd	r24, Y+39	; 0x27
 a5e:	98 a5       	ldd	r25, Y+40	; 0x28
 a60:	0e 94 9a 05 	call	0xb34	; 0xb34 <__cmpsf2>
 a64:	88 23       	and	r24, r24
 a66:	2c f4       	brge	.+10     	; 0xa72 <__stack+0x213>
		__ticks = 1;
 a68:	81 e0       	ldi	r24, 0x01	; 1
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	9a a7       	std	Y+42, r25	; 0x2a
 a6e:	89 a7       	std	Y+41, r24	; 0x29
 a70:	3f c0       	rjmp	.+126    	; 0xaf0 <__stack+0x291>
	else if (__tmp > 65535)
 a72:	20 e0       	ldi	r18, 0x00	; 0
 a74:	3f ef       	ldi	r19, 0xFF	; 255
 a76:	4f e7       	ldi	r20, 0x7F	; 127
 a78:	57 e4       	ldi	r21, 0x47	; 71
 a7a:	6d a1       	ldd	r22, Y+37	; 0x25
 a7c:	7e a1       	ldd	r23, Y+38	; 0x26
 a7e:	8f a1       	ldd	r24, Y+39	; 0x27
 a80:	98 a5       	ldd	r25, Y+40	; 0x28
 a82:	0e 94 1b 06 	call	0xc36	; 0xc36 <__gesf2>
 a86:	18 16       	cp	r1, r24
 a88:	4c f5       	brge	.+82     	; 0xadc <__stack+0x27d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 a8a:	20 e0       	ldi	r18, 0x00	; 0
 a8c:	30 e0       	ldi	r19, 0x00	; 0
 a8e:	40 e2       	ldi	r20, 0x20	; 32
 a90:	51 e4       	ldi	r21, 0x41	; 65
 a92:	69 a1       	ldd	r22, Y+33	; 0x21
 a94:	7a a1       	ldd	r23, Y+34	; 0x22
 a96:	8b a1       	ldd	r24, Y+35	; 0x23
 a98:	9c a1       	ldd	r25, Y+36	; 0x24
 a9a:	0e 94 20 06 	call	0xc40	; 0xc40 <__mulsf3>
 a9e:	dc 01       	movw	r26, r24
 aa0:	cb 01       	movw	r24, r22
 aa2:	bc 01       	movw	r22, r24
 aa4:	cd 01       	movw	r24, r26
 aa6:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__fixunssfsi>
 aaa:	dc 01       	movw	r26, r24
 aac:	cb 01       	movw	r24, r22
 aae:	9a a7       	std	Y+42, r25	; 0x2a
 ab0:	89 a7       	std	Y+41, r24	; 0x29
 ab2:	0f c0       	rjmp	.+30     	; 0xad2 <__stack+0x273>
 ab4:	80 e9       	ldi	r24, 0x90	; 144
 ab6:	91 e0       	ldi	r25, 0x01	; 1
 ab8:	9c a7       	std	Y+44, r25	; 0x2c
 aba:	8b a7       	std	Y+43, r24	; 0x2b
 abc:	8b a5       	ldd	r24, Y+43	; 0x2b
 abe:	9c a5       	ldd	r25, Y+44	; 0x2c
 ac0:	01 97       	sbiw	r24, 0x01	; 1
 ac2:	f1 f7       	brne	.-4      	; 0xac0 <__stack+0x261>
 ac4:	9c a7       	std	Y+44, r25	; 0x2c
 ac6:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 ac8:	89 a5       	ldd	r24, Y+41	; 0x29
 aca:	9a a5       	ldd	r25, Y+42	; 0x2a
 acc:	01 97       	sbiw	r24, 0x01	; 1
 ace:	9a a7       	std	Y+42, r25	; 0x2a
 ad0:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 ad2:	89 a5       	ldd	r24, Y+41	; 0x29
 ad4:	9a a5       	ldd	r25, Y+42	; 0x2a
 ad6:	89 2b       	or	r24, r25
 ad8:	69 f7       	brne	.-38     	; 0xab4 <__stack+0x255>
 ada:	14 c0       	rjmp	.+40     	; 0xb04 <__stack+0x2a5>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 adc:	6d a1       	ldd	r22, Y+37	; 0x25
 ade:	7e a1       	ldd	r23, Y+38	; 0x26
 ae0:	8f a1       	ldd	r24, Y+39	; 0x27
 ae2:	98 a5       	ldd	r25, Y+40	; 0x28
 ae4:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__fixunssfsi>
 ae8:	dc 01       	movw	r26, r24
 aea:	cb 01       	movw	r24, r22
 aec:	9a a7       	std	Y+42, r25	; 0x2a
 aee:	89 a7       	std	Y+41, r24	; 0x29
 af0:	89 a5       	ldd	r24, Y+41	; 0x29
 af2:	9a a5       	ldd	r25, Y+42	; 0x2a
 af4:	9e a7       	std	Y+46, r25	; 0x2e
 af6:	8d a7       	std	Y+45, r24	; 0x2d
 af8:	8d a5       	ldd	r24, Y+45	; 0x2d
 afa:	9e a5       	ldd	r25, Y+46	; 0x2e
 afc:	01 97       	sbiw	r24, 0x01	; 1
 afe:	f1 f7       	brne	.-4      	; 0xafc <__stack+0x29d>
 b00:	9e a7       	std	Y+46, r25	; 0x2e
 b02:	8d a7       	std	Y+45, r24	; 0x2d
                       _delay_ms(20);

                       if(DIO_u8GetPinVal(DIO_U8_PORTD,DIO_U8_PIN1))
 b04:	61 e0       	ldi	r22, 0x01	; 1
 b06:	83 e0       	ldi	r24, 0x03	; 3
 b08:	0e 94 63 02 	call	0x4c6	; 0x4c6 <DIO_u8GetPinVal>
 b0c:	88 23       	and	r24, r24
 b0e:	09 f4       	brne	.+2      	; 0xb12 <__stack+0x2b3>
 b10:	fe ce       	rjmp	.-516    	; 0x90e <__stack+0xaf>
                       	    {
                              CLEAR_BIT(MCUCSR,DIO_U8_PIN4);
 b12:	84 e5       	ldi	r24, 0x54	; 84
 b14:	90 e0       	ldi	r25, 0x00	; 0
 b16:	fc 01       	movw	r30, r24
 b18:	20 81       	ld	r18, Z
 b1a:	84 e5       	ldi	r24, 0x54	; 84
 b1c:	90 e0       	ldi	r25, 0x00	; 0
 b1e:	2f 7e       	andi	r18, 0xEF	; 239
 b20:	fc 01       	movw	r30, r24
 b22:	20 83       	st	Z, r18
	    	 else
	    	 {
	    		 DIO_voidSetPinVal(DIO_U8_PORTD, DIO_U8_PIN3, DIO_U8_LOW);
                while(1)
                {
	    		    DIO_voidSetPinVal(DIO_U8_PORTC, DIO_U8_PIN3, DIO_U8_HIGH);
 b24:	f4 ce       	rjmp	.-536    	; 0x90e <__stack+0xaf>
                              CLEAR_BIT(MCUCSR,DIO_U8_PIN4);
                       	    }
                }

	    	 }
	           	 while(DIO_u8GetPinVal(DIO_U8_PORTD,DIO_U8_PIN6)){};
 b26:	66 e0       	ldi	r22, 0x06	; 6
 b28:	83 e0       	ldi	r24, 0x03	; 3
 b2a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <DIO_u8GetPinVal>
 b2e:	88 23       	and	r24, r24
 b30:	d1 f7       	brne	.-12     	; 0xb26 <__stack+0x2c7>

	    u8 counter_ones = 0;
		u8 counter_Tens= 0 ;
	while(1)
	{
		DIO_voidSetPinVal(DIO_U8_PORTB, DIO_U8_PIN1, DIO_U8_LOW);
 b32:	8e cd       	rjmp	.-1252   	; 0x650 <main+0xbe>

00000b34 <__cmpsf2>:
 b34:	0e 94 ce 05 	call	0xb9c	; 0xb9c <__fp_cmp>
 b38:	08 f4       	brcc	.+2      	; 0xb3c <__cmpsf2+0x8>
 b3a:	81 e0       	ldi	r24, 0x01	; 1
 b3c:	08 95       	ret

00000b3e <__fixunssfsi>:
 b3e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__fp_splitA>
 b42:	88 f0       	brcs	.+34     	; 0xb66 <__fixunssfsi+0x28>
 b44:	9f 57       	subi	r25, 0x7F	; 127
 b46:	98 f0       	brcs	.+38     	; 0xb6e <__fixunssfsi+0x30>
 b48:	b9 2f       	mov	r27, r25
 b4a:	99 27       	eor	r25, r25
 b4c:	b7 51       	subi	r27, 0x17	; 23
 b4e:	b0 f0       	brcs	.+44     	; 0xb7c <__fixunssfsi+0x3e>
 b50:	e1 f0       	breq	.+56     	; 0xb8a <__fixunssfsi+0x4c>
 b52:	66 0f       	add	r22, r22
 b54:	77 1f       	adc	r23, r23
 b56:	88 1f       	adc	r24, r24
 b58:	99 1f       	adc	r25, r25
 b5a:	1a f0       	brmi	.+6      	; 0xb62 <__fixunssfsi+0x24>
 b5c:	ba 95       	dec	r27
 b5e:	c9 f7       	brne	.-14     	; 0xb52 <__fixunssfsi+0x14>
 b60:	14 c0       	rjmp	.+40     	; 0xb8a <__fixunssfsi+0x4c>
 b62:	b1 30       	cpi	r27, 0x01	; 1
 b64:	91 f0       	breq	.+36     	; 0xb8a <__fixunssfsi+0x4c>
 b66:	0e 94 14 06 	call	0xc28	; 0xc28 <__fp_zero>
 b6a:	b1 e0       	ldi	r27, 0x01	; 1
 b6c:	08 95       	ret
 b6e:	0c 94 14 06 	jmp	0xc28	; 0xc28 <__fp_zero>
 b72:	67 2f       	mov	r22, r23
 b74:	78 2f       	mov	r23, r24
 b76:	88 27       	eor	r24, r24
 b78:	b8 5f       	subi	r27, 0xF8	; 248
 b7a:	39 f0       	breq	.+14     	; 0xb8a <__fixunssfsi+0x4c>
 b7c:	b9 3f       	cpi	r27, 0xF9	; 249
 b7e:	cc f3       	brlt	.-14     	; 0xb72 <__fixunssfsi+0x34>
 b80:	86 95       	lsr	r24
 b82:	77 95       	ror	r23
 b84:	67 95       	ror	r22
 b86:	b3 95       	inc	r27
 b88:	d9 f7       	brne	.-10     	; 0xb80 <__fixunssfsi+0x42>
 b8a:	3e f4       	brtc	.+14     	; 0xb9a <__fixunssfsi+0x5c>
 b8c:	90 95       	com	r25
 b8e:	80 95       	com	r24
 b90:	70 95       	com	r23
 b92:	61 95       	neg	r22
 b94:	7f 4f       	sbci	r23, 0xFF	; 255
 b96:	8f 4f       	sbci	r24, 0xFF	; 255
 b98:	9f 4f       	sbci	r25, 0xFF	; 255
 b9a:	08 95       	ret

00000b9c <__fp_cmp>:
 b9c:	99 0f       	add	r25, r25
 b9e:	00 08       	sbc	r0, r0
 ba0:	55 0f       	add	r21, r21
 ba2:	aa 0b       	sbc	r26, r26
 ba4:	e0 e8       	ldi	r30, 0x80	; 128
 ba6:	fe ef       	ldi	r31, 0xFE	; 254
 ba8:	16 16       	cp	r1, r22
 baa:	17 06       	cpc	r1, r23
 bac:	e8 07       	cpc	r30, r24
 bae:	f9 07       	cpc	r31, r25
 bb0:	c0 f0       	brcs	.+48     	; 0xbe2 <__fp_cmp+0x46>
 bb2:	12 16       	cp	r1, r18
 bb4:	13 06       	cpc	r1, r19
 bb6:	e4 07       	cpc	r30, r20
 bb8:	f5 07       	cpc	r31, r21
 bba:	98 f0       	brcs	.+38     	; 0xbe2 <__fp_cmp+0x46>
 bbc:	62 1b       	sub	r22, r18
 bbe:	73 0b       	sbc	r23, r19
 bc0:	84 0b       	sbc	r24, r20
 bc2:	95 0b       	sbc	r25, r21
 bc4:	39 f4       	brne	.+14     	; 0xbd4 <__fp_cmp+0x38>
 bc6:	0a 26       	eor	r0, r26
 bc8:	61 f0       	breq	.+24     	; 0xbe2 <__fp_cmp+0x46>
 bca:	23 2b       	or	r18, r19
 bcc:	24 2b       	or	r18, r20
 bce:	25 2b       	or	r18, r21
 bd0:	21 f4       	brne	.+8      	; 0xbda <__fp_cmp+0x3e>
 bd2:	08 95       	ret
 bd4:	0a 26       	eor	r0, r26
 bd6:	09 f4       	brne	.+2      	; 0xbda <__fp_cmp+0x3e>
 bd8:	a1 40       	sbci	r26, 0x01	; 1
 bda:	a6 95       	lsr	r26
 bdc:	8f ef       	ldi	r24, 0xFF	; 255
 bde:	81 1d       	adc	r24, r1
 be0:	81 1d       	adc	r24, r1
 be2:	08 95       	ret

00000be4 <__fp_split3>:
 be4:	57 fd       	sbrc	r21, 7
 be6:	90 58       	subi	r25, 0x80	; 128
 be8:	44 0f       	add	r20, r20
 bea:	55 1f       	adc	r21, r21
 bec:	59 f0       	breq	.+22     	; 0xc04 <__fp_splitA+0x10>
 bee:	5f 3f       	cpi	r21, 0xFF	; 255
 bf0:	71 f0       	breq	.+28     	; 0xc0e <__fp_splitA+0x1a>
 bf2:	47 95       	ror	r20

00000bf4 <__fp_splitA>:
 bf4:	88 0f       	add	r24, r24
 bf6:	97 fb       	bst	r25, 7
 bf8:	99 1f       	adc	r25, r25
 bfa:	61 f0       	breq	.+24     	; 0xc14 <__fp_splitA+0x20>
 bfc:	9f 3f       	cpi	r25, 0xFF	; 255
 bfe:	79 f0       	breq	.+30     	; 0xc1e <__fp_splitA+0x2a>
 c00:	87 95       	ror	r24
 c02:	08 95       	ret
 c04:	12 16       	cp	r1, r18
 c06:	13 06       	cpc	r1, r19
 c08:	14 06       	cpc	r1, r20
 c0a:	55 1f       	adc	r21, r21
 c0c:	f2 cf       	rjmp	.-28     	; 0xbf2 <__fp_split3+0xe>
 c0e:	46 95       	lsr	r20
 c10:	f1 df       	rcall	.-30     	; 0xbf4 <__fp_splitA>
 c12:	08 c0       	rjmp	.+16     	; 0xc24 <__fp_splitA+0x30>
 c14:	16 16       	cp	r1, r22
 c16:	17 06       	cpc	r1, r23
 c18:	18 06       	cpc	r1, r24
 c1a:	99 1f       	adc	r25, r25
 c1c:	f1 cf       	rjmp	.-30     	; 0xc00 <__fp_splitA+0xc>
 c1e:	86 95       	lsr	r24
 c20:	71 05       	cpc	r23, r1
 c22:	61 05       	cpc	r22, r1
 c24:	08 94       	sec
 c26:	08 95       	ret

00000c28 <__fp_zero>:
 c28:	e8 94       	clt

00000c2a <__fp_szero>:
 c2a:	bb 27       	eor	r27, r27
 c2c:	66 27       	eor	r22, r22
 c2e:	77 27       	eor	r23, r23
 c30:	cb 01       	movw	r24, r22
 c32:	97 f9       	bld	r25, 7
 c34:	08 95       	ret

00000c36 <__gesf2>:
 c36:	0e 94 ce 05 	call	0xb9c	; 0xb9c <__fp_cmp>
 c3a:	08 f4       	brcc	.+2      	; 0xc3e <__gesf2+0x8>
 c3c:	8f ef       	ldi	r24, 0xFF	; 255
 c3e:	08 95       	ret

00000c40 <__mulsf3>:
 c40:	0e 94 33 06 	call	0xc66	; 0xc66 <__mulsf3x>
 c44:	0c 94 a4 06 	jmp	0xd48	; 0xd48 <__fp_round>
 c48:	0e 94 96 06 	call	0xd2c	; 0xd2c <__fp_pscA>
 c4c:	38 f0       	brcs	.+14     	; 0xc5c <__mulsf3+0x1c>
 c4e:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__fp_pscB>
 c52:	20 f0       	brcs	.+8      	; 0xc5c <__mulsf3+0x1c>
 c54:	95 23       	and	r25, r21
 c56:	11 f0       	breq	.+4      	; 0xc5c <__mulsf3+0x1c>
 c58:	0c 94 8d 06 	jmp	0xd1a	; 0xd1a <__fp_inf>
 c5c:	0c 94 93 06 	jmp	0xd26	; 0xd26 <__fp_nan>
 c60:	11 24       	eor	r1, r1
 c62:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <__fp_szero>

00000c66 <__mulsf3x>:
 c66:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__fp_split3>
 c6a:	70 f3       	brcs	.-36     	; 0xc48 <__mulsf3+0x8>

00000c6c <__mulsf3_pse>:
 c6c:	95 9f       	mul	r25, r21
 c6e:	c1 f3       	breq	.-16     	; 0xc60 <__mulsf3+0x20>
 c70:	95 0f       	add	r25, r21
 c72:	50 e0       	ldi	r21, 0x00	; 0
 c74:	55 1f       	adc	r21, r21
 c76:	62 9f       	mul	r22, r18
 c78:	f0 01       	movw	r30, r0
 c7a:	72 9f       	mul	r23, r18
 c7c:	bb 27       	eor	r27, r27
 c7e:	f0 0d       	add	r31, r0
 c80:	b1 1d       	adc	r27, r1
 c82:	63 9f       	mul	r22, r19
 c84:	aa 27       	eor	r26, r26
 c86:	f0 0d       	add	r31, r0
 c88:	b1 1d       	adc	r27, r1
 c8a:	aa 1f       	adc	r26, r26
 c8c:	64 9f       	mul	r22, r20
 c8e:	66 27       	eor	r22, r22
 c90:	b0 0d       	add	r27, r0
 c92:	a1 1d       	adc	r26, r1
 c94:	66 1f       	adc	r22, r22
 c96:	82 9f       	mul	r24, r18
 c98:	22 27       	eor	r18, r18
 c9a:	b0 0d       	add	r27, r0
 c9c:	a1 1d       	adc	r26, r1
 c9e:	62 1f       	adc	r22, r18
 ca0:	73 9f       	mul	r23, r19
 ca2:	b0 0d       	add	r27, r0
 ca4:	a1 1d       	adc	r26, r1
 ca6:	62 1f       	adc	r22, r18
 ca8:	83 9f       	mul	r24, r19
 caa:	a0 0d       	add	r26, r0
 cac:	61 1d       	adc	r22, r1
 cae:	22 1f       	adc	r18, r18
 cb0:	74 9f       	mul	r23, r20
 cb2:	33 27       	eor	r19, r19
 cb4:	a0 0d       	add	r26, r0
 cb6:	61 1d       	adc	r22, r1
 cb8:	23 1f       	adc	r18, r19
 cba:	84 9f       	mul	r24, r20
 cbc:	60 0d       	add	r22, r0
 cbe:	21 1d       	adc	r18, r1
 cc0:	82 2f       	mov	r24, r18
 cc2:	76 2f       	mov	r23, r22
 cc4:	6a 2f       	mov	r22, r26
 cc6:	11 24       	eor	r1, r1
 cc8:	9f 57       	subi	r25, 0x7F	; 127
 cca:	50 40       	sbci	r21, 0x00	; 0
 ccc:	9a f0       	brmi	.+38     	; 0xcf4 <__mulsf3_pse+0x88>
 cce:	f1 f0       	breq	.+60     	; 0xd0c <__mulsf3_pse+0xa0>
 cd0:	88 23       	and	r24, r24
 cd2:	4a f0       	brmi	.+18     	; 0xce6 <__mulsf3_pse+0x7a>
 cd4:	ee 0f       	add	r30, r30
 cd6:	ff 1f       	adc	r31, r31
 cd8:	bb 1f       	adc	r27, r27
 cda:	66 1f       	adc	r22, r22
 cdc:	77 1f       	adc	r23, r23
 cde:	88 1f       	adc	r24, r24
 ce0:	91 50       	subi	r25, 0x01	; 1
 ce2:	50 40       	sbci	r21, 0x00	; 0
 ce4:	a9 f7       	brne	.-22     	; 0xcd0 <__mulsf3_pse+0x64>
 ce6:	9e 3f       	cpi	r25, 0xFE	; 254
 ce8:	51 05       	cpc	r21, r1
 cea:	80 f0       	brcs	.+32     	; 0xd0c <__mulsf3_pse+0xa0>
 cec:	0c 94 8d 06 	jmp	0xd1a	; 0xd1a <__fp_inf>
 cf0:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <__fp_szero>
 cf4:	5f 3f       	cpi	r21, 0xFF	; 255
 cf6:	e4 f3       	brlt	.-8      	; 0xcf0 <__mulsf3_pse+0x84>
 cf8:	98 3e       	cpi	r25, 0xE8	; 232
 cfa:	d4 f3       	brlt	.-12     	; 0xcf0 <__mulsf3_pse+0x84>
 cfc:	86 95       	lsr	r24
 cfe:	77 95       	ror	r23
 d00:	67 95       	ror	r22
 d02:	b7 95       	ror	r27
 d04:	f7 95       	ror	r31
 d06:	e7 95       	ror	r30
 d08:	9f 5f       	subi	r25, 0xFF	; 255
 d0a:	c1 f7       	brne	.-16     	; 0xcfc <__mulsf3_pse+0x90>
 d0c:	fe 2b       	or	r31, r30
 d0e:	88 0f       	add	r24, r24
 d10:	91 1d       	adc	r25, r1
 d12:	96 95       	lsr	r25
 d14:	87 95       	ror	r24
 d16:	97 f9       	bld	r25, 7
 d18:	08 95       	ret

00000d1a <__fp_inf>:
 d1a:	97 f9       	bld	r25, 7
 d1c:	9f 67       	ori	r25, 0x7F	; 127
 d1e:	80 e8       	ldi	r24, 0x80	; 128
 d20:	70 e0       	ldi	r23, 0x00	; 0
 d22:	60 e0       	ldi	r22, 0x00	; 0
 d24:	08 95       	ret

00000d26 <__fp_nan>:
 d26:	9f ef       	ldi	r25, 0xFF	; 255
 d28:	80 ec       	ldi	r24, 0xC0	; 192
 d2a:	08 95       	ret

00000d2c <__fp_pscA>:
 d2c:	00 24       	eor	r0, r0
 d2e:	0a 94       	dec	r0
 d30:	16 16       	cp	r1, r22
 d32:	17 06       	cpc	r1, r23
 d34:	18 06       	cpc	r1, r24
 d36:	09 06       	cpc	r0, r25
 d38:	08 95       	ret

00000d3a <__fp_pscB>:
 d3a:	00 24       	eor	r0, r0
 d3c:	0a 94       	dec	r0
 d3e:	12 16       	cp	r1, r18
 d40:	13 06       	cpc	r1, r19
 d42:	14 06       	cpc	r1, r20
 d44:	05 06       	cpc	r0, r21
 d46:	08 95       	ret

00000d48 <__fp_round>:
 d48:	09 2e       	mov	r0, r25
 d4a:	03 94       	inc	r0
 d4c:	00 0c       	add	r0, r0
 d4e:	11 f4       	brne	.+4      	; 0xd54 <__fp_round+0xc>
 d50:	88 23       	and	r24, r24
 d52:	52 f0       	brmi	.+20     	; 0xd68 <__fp_round+0x20>
 d54:	bb 0f       	add	r27, r27
 d56:	40 f4       	brcc	.+16     	; 0xd68 <__fp_round+0x20>
 d58:	bf 2b       	or	r27, r31
 d5a:	11 f4       	brne	.+4      	; 0xd60 <__fp_round+0x18>
 d5c:	60 ff       	sbrs	r22, 0
 d5e:	04 c0       	rjmp	.+8      	; 0xd68 <__fp_round+0x20>
 d60:	6f 5f       	subi	r22, 0xFF	; 255
 d62:	7f 4f       	sbci	r23, 0xFF	; 255
 d64:	8f 4f       	sbci	r24, 0xFF	; 255
 d66:	9f 4f       	sbci	r25, 0xFF	; 255
 d68:	08 95       	ret

00000d6a <_exit>:
 d6a:	f8 94       	cli

00000d6c <__stop_program>:
 d6c:	ff cf       	rjmp	.-2      	; 0xd6c <__stop_program>
